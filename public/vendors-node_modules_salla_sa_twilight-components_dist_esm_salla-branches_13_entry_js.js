"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkTheme_One"] = self["webpackChunkTheme_One"] || []).push([["vendors-node_modules_salla_sa_twilight-components_dist_esm_salla-branches_13_entry_js"],{

/***/ "./node_modules/@salla.sa/twilight-components/dist/esm/Helper-e1d414a5.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@salla.sa/twilight-components/dist/esm/Helper-e1d414a5.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"H\": () => (/* binding */ Helper$1)\n/* harmony export */ });\n/*!\n * Crafted with ❤ by Salla\n */\n//TODO::check why there are too much listeners for languages::translations.loaded\nsalla.event.setMaxListeners(20);\nclass Helper extends salla.AppHelpers {\n  setHost(host) {\n    this.host = host;\n  }\n  getElement(selector) {\n    return this.host.querySelector(selector);\n  }\n  getAttribute(selector, attribute) {\n    var _a;\n    return (_a = this.getElement(selector)) === null || _a === void 0 ? void 0 : _a.getAttribute(attribute);\n  }\n  val(selector) {\n    return this.getAttribute(selector, 'value');\n  }\n  isUser() {\n    return salla.config.get('user.type') === 'user';\n  }\n}\nconst Helper$1 = new Helper;\n\n\n\n\n//# sourceURL=webpack://Theme-One/./node_modules/@salla.sa/twilight-components/dist/esm/Helper-e1d414a5.js?");

/***/ }),

/***/ "./node_modules/@salla.sa/twilight-components/dist/esm/salla-branches_13.entry.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@salla.sa/twilight-components/dist/esm/salla-branches_13.entry.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"salla_branches\": () => (/* binding */ SallaBranches),\n/* harmony export */   \"salla_button\": () => (/* binding */ SallaButton),\n/* harmony export */   \"salla_infinite_scroll\": () => (/* binding */ SallaInfiniteScroll),\n/* harmony export */   \"salla_localization_modal\": () => (/* binding */ SallaLocalizationModal),\n/* harmony export */   \"salla_login_modal\": () => (/* binding */ SallaLoginModal),\n/* harmony export */   \"salla_modal\": () => (/* binding */ SallaModal),\n/* harmony export */   \"salla_offer_modal\": () => (/* binding */ SallaOfferModal),\n/* harmony export */   \"salla_product_availability\": () => (/* binding */ SallaProductAvailability),\n/* harmony export */   \"salla_rating_modal\": () => (/* binding */ SallaRatingModal),\n/* harmony export */   \"salla_rating_stars\": () => (/* binding */ SallaRatingStars),\n/* harmony export */   \"salla_search\": () => (/* binding */ SallaSearch),\n/* harmony export */   \"salla_tel_input\": () => (/* binding */ SallaTelInput),\n/* harmony export */   \"salla_verify\": () => (/* binding */ SallaVerify)\n/* harmony export */ });\n/* harmony import */ var _index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-20b84fd0.js */ \"./node_modules/@salla.sa/twilight-components/dist/esm/index-20b84fd0.js\");\n/* harmony import */ var _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Helper-e1d414a5.js */ \"./node_modules/@salla.sa/twilight-components/dist/esm/Helper-e1d414a5.js\");\n/*!\n * Crafted with ❤ by Salla\n */\n\n\n\nconst sallaBranchesCss = \"\";\n\nconst SallaBranches = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.open = true;\n    this.isOpenedBefore = salla.storage.get(\"branch-choosed-before\");\n    this.displayAs = 'default'; //todo:: change it to boolean, isPopup default false\n    this.browseProductsFrom = 'all'; //todo:: get better name\n    this.branches = [\n      { id: 1, name: 'فرع الرياض', open: true, available: true, limited: false, tag: 'متوفر' },\n      { id: 2, name: 'فرع جدة', open: false, available: false, limited: false, tag: 'غير متوفر' },\n      { id: 3, name: 'فرع مكة', open: true, available: true, limited: false, tag: 'متوفر' },\n      { id: 4, name: 'فرع المدينة', open: true, available: true, limited: false, tag: 'متوفر' },\n      { id: 5, name: 'فرع جازان', open: true, available: true, limited: true, tag: 'الكمية محدودة' }\n    ];\n    this.current = 1;\n    this.currentBranch = (prop) => {\n      return this.branches.filter((el) => el.id == this.current)[0][prop];\n    };\n    this.statusColor = (branch = null) => {\n      return branch ?\n        branch.limited ? 's-branches-color-red' : branch.available ? 's-branches-color-green' : 's-branches-color-gray'\n        :\n          this.currentBranch('limited') ? 's-branches-color-red' : this.currentBranch('available') ? 's-branches-color-green' : 's-branches-color-gray';\n    };\n    this.isChoiceable = () => {\n      return (this.browseProductsFrom !== 'all' && this.position == 'single') || this.position == 'header';\n    };\n    this.formTitle = () => {\n      return this.isChoiceable() ?\n        'توفر المنتج في الفروع الآخرى'\n        : 'التسوق من فرع آخر';\n    };\n    salla.event.on('branches::show', btn => btn.dataset.target == this.host.id && this.show());\n    salla.lang.onLoaded(() => { var _a; return (_a = this.btn) === null || _a === void 0 ? void 0 : _a.setText(salla.lang.get('common.elements.ok')); });\n  }\n  //todo:: add description for all @methods\n  async show() {\n    var _a;\n    return (_a = this.modal) === null || _a === void 0 ? void 0 : _a.open();\n  }\n  async hide() {\n    var _a;\n    return (_a = this.modal) === null || _a === void 0 ? void 0 : _a.close();\n  }\n  handelChange(event) {\n    this.selected = event.target.value;\n  }\n  handleSubmit() {\n    this.btn.load().then(() => {\n      setTimeout(() => location.reload(), 2000);\n    });\n    salla.storage.set(\"branch-choosed-before\", true);\n    this.show();\n    setTimeout(() => {\n      this.current = this.selected;\n    }, 300);\n  }\n  render() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-modal\", { icon: \"sicon-store-alt\", \"modal-title\": \"\\u0641\\u0631\\u0639 \\u0627\\u0644\\u0631\\u064A\\u0627\\u0636\", \"sub-title\": \"\\u0623\\u0646\\u062A \\u0627\\u0644\\u0622\\u0646 \\u062A\\u062A\\u0635\\u0641\\u062D \\u0627\\u0644\\u0645\\u062A\\u062C\\u0631 \\u0645\\u0646\", \"sub-title-first\": true,\n      // is-closable={!this.isOpenedBefore && this.displayAs == 'popup' ? 'false' : 'true'}\n      ref: (modal) => this.modal = modal, width: \"sm\", id: \"s-branches-modal\", class: \"s-hidden\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"h4\", { class: \"s-branches-title\" }, this.formTitle()), this.branches.length <= 5 ?\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-branches-space-v\" }, this.branches.map((branch) => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-branches-input-wrap\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { id: this.position + '_branch_' + branch.id, disabled: !branch.open && this.isChoiceable(), name: \"lang\", type: \"radio\", value: branch.id, onChange: (event) => this.handelChange(event), class: {\n          's-branches-input': true,\n          'opacity-50': !branch.open,\n          's-hidden': !this.isChoiceable()\n        }, checked: this.current == branch.id }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { htmlFor: this.position + '_branch_' + branch.id, class: {\n          's-branches-label': true,\n          's-branches-clickable': this.isChoiceable()\n        } }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: { 's-branches-is-closed': !branch.open } }, branch.name), this.isChoiceable() ?\n        (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"small\", { class: \"s-branches-closed-badge\" }, branch.open ? '' : 'مُغلق')\n        :\n          (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: this.statusColor(branch) }, branch.tag)))))\n      :\n        (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"select\", { class: \"s-branches-select\", onInput: (event) => this.handelChange(event) }, this.branches.map(branch => ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"option\", { value: branch.id, disabled: !branch.open, selected: this.selected == branch.id }, branch.name, \" \", branch.open ? '' : '- مُغلق')))), this.isChoiceable() ?\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"footer\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { ref: btn => this.btn = btn, onClick: () => this.handleSubmit(), class: \"s-branches-submit\", width: \"wide\" }, salla.lang.get('common.elements.ok')))\n      : ''));\n  }\n  componentDidRender() {\n    if (!this.isOpenedBefore && this.displayAs == 'popup') {\n      this.show();\n    }\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nSallaBranches.style = sallaBranchesCss;\n\nconst sallaButtonCss = \"\";\n\nconst SallaButton = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.hostAttributes = {};\n    /**\n     * Button Type\n     */\n    this.shape = 'btn';\n    /**\n     * Button Color\n     */\n    this.color = 'primary';\n    /**\n     * Button Fill\n     */\n    this.fill = 'solid';\n    /**\n     * Button Size\n     */\n    this.size = 'medium';\n    /**\n     * Button Width\n     */\n    this.width = 'normal';\n    /**\n     * Is the button currently loading\n     */\n    this.loading = false;\n    /**\n     * Is the button currently disabled\n     */\n    this.disabled = false;\n    /**\n     * If there is need to change loader position, pass the position\n     */\n    this.loaderPosition = 'after';\n  }\n  /**\n   * Run loading animation\n   */\n  async load() {\n    if (this.loaderPosition == 'center')\n      this.text.classList.add('s-button-hide');\n    this.host.setAttribute('loading', '');\n    return this.host;\n  }\n  /**\n   * Stop loading animation\n   */\n  async stop() {\n    this.host.removeAttribute('loading');\n    this.host.querySelector('button').removeAttribute('loading');\n    if (this.loaderPosition == 'center')\n      this.text.classList.remove('s-button-hide');\n    return this.host;\n  }\n  /**\n   * Changing the body of the button\n   * @param html\n   */\n  async setText(html) {\n    this.text.innerHTML = html;\n    return this.host;\n  }\n  /**\n   * Add `disabled` attribute\n   */\n  async disable() {\n    this.host.setAttribute('disabled', '');\n    return this.host;\n  }\n  /**\n   * Remove `disabled` attribute\n   */\n  async enable() {\n    this.host.removeAttribute('disabled');\n    return this.host;\n  }\n  getBtnAttributes() {\n    for (let i = 0; i < this.host.attributes.length; i++) {\n      if (!['color', 'fill', 'size', 'width', 'id'].includes(this.host.attributes[i].name)) {\n        this.hostAttributes[this.host.attributes[i].name] = this.host.attributes[i].value;\n      }\n    }\n    this.hostAttributes.type = this.hostAttributes.type || 'button';\n    this.hostAttributes.class +=\n      ' s-button-element s-button-' + this.shape\n        + ' s-button-' + (this.fill == \"none\" ? 'fill-none' : this.fill)\n        + (this.size != \"medium\" ? ' s-button-' + this.size : '')\n        + (this.width != \"normal\" ? ' s-button-' + this.width : '')\n        + (this.shape == \"link\" ? ' s-button-' + this.color + '-link' : '')\n        + (this.shape != \"link\" && this.fill != 'outline' ? ' s-button-' + this.color : '')\n        + (this.fill == 'outline' ? ' s-button-' + this.color + '-outline' : '')\n        + (this.disabled ? ' s-button-disabled ' : '')\n        + (this.shape == 'icon' ? ' s-button-loader-center' : ' s-button-loader-' + this.loaderPosition);\n    return this.hostAttributes;\n  }\n  button() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"button\", Object.assign({}, this.getBtnAttributes(), { disabled: this.disabled }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-button-text\", ref: el => this.text = el }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", null)), this.loading ? (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-button-loader\" }) : ''));\n  }\n  render() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: \"s-button-wrap\" }, this.href ? (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"a\", { href: this.href }, this.button()) : this.button()));\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nSallaButton.style = sallaButtonCss;\n\nconst sallaInfiniteScrollCss = \"\";\n\nconst SallaInfiniteScroll = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    /**\n     * Next Page element\n     */\n    this.nextPage = '';\n    /**\n     * Is there is need to autoload next page when scroll `next-page-autoload|next-page.autoload`\n     */\n    this.autoload = false;\n    /**\n     * Class selector to know the container if it's not the host `<salla-infinite-scroll>`\n     */\n    this.container = 'salla-infinite-scroll';\n    /**\n     * Class selector to know list items\n     */\n    this.item = 'salla-infinite-scroll > *';\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.setHost(this.host);\n    this.status = document.createElement('div');\n    this.status.className = 's-infinite-scroll-wrapper';\n    this.status.innerHTML = `<div class=\"s-infinite-scroll-status\" style=\"display:none\">\n        <p class=\"s-infinite-scroll-last infinite-scroll-last\"></p>\n        <p class=\"s-infinite-scroll-error infinite-scroll-error\"></p>\n      </div>\n      <a href=\"${this.nextPage}\" class=\"s-infinite-scroll-btn s-button-btn btn--has-loading s-button-primary\">\n        <span class=\"s-button-text s-infinite-scroll-btn-text\">${salla.lang.get('common.elements.load_more')}</span>\n        <span class=\"s-button-loader s-button-loader-center s-infinite-scroll-btn-loader\" style=\"display: none\"></span>\n      </a>`;\n    this.btnLoader = this.status.querySelector('.s-button-loader');\n    salla.lang.onLoaded(() => {\n      this.status.querySelector('.s-button-text').innerHTML = salla.lang.get('common.elements.load_more');\n      this.status.querySelector('.s-infinite-scroll-last').innerHTML = salla.lang.get('common.elements.end_of_content');\n      this.status.querySelector('.s-infinite-scroll-error').innerHTML = salla.lang.get('common.elements.failed_to_load_more');\n    });\n  }\n  loading(isLoading = true) {\n    let btnText = this.status.querySelector('.s-button-text');\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(btnText, 's-button-hide', 's-button-show', () => isLoading);\n    this.btnLoader.style.display = isLoading ? 'inherit' : 'none';\n  }\n  render() {\n    return this.nextPage.length > 1 ?\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: \"s-infinite-scroll-container\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", null)) : '';\n  }\n  componentDidLoad() {\n    if (this.nextPage.length === 0) {\n      return;\n    }\n    this.host.insertAdjacentElement('afterend', this.status);\n    let that = this;\n    let infScroll = salla.infiniteScroll.initiate(this.container, {\n      history: this.autoload ? 'push' : false,\n      scrollThreshold: this.autoload ? 400 : false,\n      nextPage: this.nextPage,\n      checkLastPage: 'salla-infinite-scroll[next-page*=\":\"],salla-infinite-scroll[next-page*=\".\"]',\n      status: '.s-infinite-scroll-status',\n      button: this.status.querySelector('.s-button-btn'),\n      append: this.item,\n      path: function () {\n        return that.nextPage.replace(/page\\=(\\d)/g, 'page=' + (this.loadCount + 2));\n      },\n    })\n      .on('request', () => this.loading())\n      .on('load', () => {\n      this.loading(false);\n      if (infScroll.pageIndex == 2) {\n        infScroll.option({ loadOnScroll: false });\n      }\n      if (infScroll.pageIndex == 3) {\n        infScroll.option({ loadOnScroll: true });\n      }\n    })\n      .on('error', () => this.loading(false));\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nSallaInfiniteScroll.style = sallaInfiniteScrollCss;\n\nconst sallaLocalizationModalCss = \".iti__flag{width:20px}.iti__flag.iti__be{width:18px}.iti__flag.iti__ch{width:15px}.iti__flag.iti__mc{width:19px}.iti__flag.iti__ne{width:18px}.iti__flag.iti__np{width:13px}.iti__flag.iti__va{width:15px}@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi){.iti__flag{background-size:5652px 15px}}.iti__flag.iti__ac{height:10px;background-position:0px 0px}.iti__flag.iti__ad{height:14px;background-position:-22px 0px}.iti__flag.iti__ae{height:10px;background-position:-44px 0px}.iti__flag.iti__af{height:14px;background-position:-66px 0px}.iti__flag.iti__ag{height:14px;background-position:-88px 0px}.iti__flag.iti__ai{height:10px;background-position:-110px 0px}.iti__flag.iti__al{height:15px;background-position:-132px 0px}.iti__flag.iti__am{height:10px;background-position:-154px 0px}.iti__flag.iti__ao{height:14px;background-position:-176px 0px}.iti__flag.iti__aq{height:14px;background-position:-198px 0px}.iti__flag.iti__ar{height:13px;background-position:-220px 0px}.iti__flag.iti__as{height:10px;background-position:-242px 0px}.iti__flag.iti__at{height:14px;background-position:-264px 0px}.iti__flag.iti__au{height:10px;background-position:-286px 0px}.iti__flag.iti__aw{height:14px;background-position:-308px 0px}.iti__flag.iti__ax{height:13px;background-position:-330px 0px}.iti__flag.iti__az{height:10px;background-position:-352px 0px}.iti__flag.iti__ba{height:10px;background-position:-374px 0px}.iti__flag.iti__bb{height:14px;background-position:-396px 0px}.iti__flag.iti__bd{height:12px;background-position:-418px 0px}.iti__flag.iti__be{height:15px;background-position:-440px 0px}.iti__flag.iti__bf{height:14px;background-position:-460px 0px}.iti__flag.iti__bg{height:12px;background-position:-482px 0px}.iti__flag.iti__bh{height:12px;background-position:-504px 0px}.iti__flag.iti__bi{height:12px;background-position:-526px 0px}.iti__flag.iti__bj{height:14px;background-position:-548px 0px}.iti__flag.iti__bl{height:14px;background-position:-570px 0px}.iti__flag.iti__bm{height:10px;background-position:-592px 0px}.iti__flag.iti__bn{height:10px;background-position:-614px 0px}.iti__flag.iti__bo{height:14px;background-position:-636px 0px}.iti__flag.iti__bq{height:14px;background-position:-658px 0px}.iti__flag.iti__br{height:14px;background-position:-680px 0px}.iti__flag.iti__bs{height:10px;background-position:-702px 0px}.iti__flag.iti__bt{height:14px;background-position:-724px 0px}.iti__flag.iti__bv{height:15px;background-position:-746px 0px}.iti__flag.iti__bw{height:14px;background-position:-768px 0px}.iti__flag.iti__by{height:10px;background-position:-790px 0px}.iti__flag.iti__bz{height:14px;background-position:-812px 0px}.iti__flag.iti__ca{height:10px;background-position:-834px 0px}.iti__flag.iti__cc{height:10px;background-position:-856px 0px}.iti__flag.iti__cd{height:15px;background-position:-878px 0px}.iti__flag.iti__cf{height:14px;background-position:-900px 0px}.iti__flag.iti__cg{height:14px;background-position:-922px 0px}.iti__flag.iti__ch{height:15px;background-position:-944px 0px}.iti__flag.iti__ci{height:14px;background-position:-961px 0px}.iti__flag.iti__ck{height:10px;background-position:-983px 0px}.iti__flag.iti__cl{height:14px;background-position:-1005px 0px}.iti__flag.iti__cm{height:14px;background-position:-1027px 0px}.iti__flag.iti__cn{height:14px;background-position:-1049px 0px}.iti__flag.iti__co{height:14px;background-position:-1071px 0px}.iti__flag.iti__cp{height:14px;background-position:-1093px 0px}.iti__flag.iti__cr{height:12px;background-position:-1115px 0px}.iti__flag.iti__cu{height:10px;background-position:-1137px 0px}.iti__flag.iti__cv{height:12px;background-position:-1159px 0px}.iti__flag.iti__cw{height:14px;background-position:-1181px 0px}.iti__flag.iti__cx{height:10px;background-position:-1203px 0px}.iti__flag.iti__cy{height:14px;background-position:-1225px 0px}.iti__flag.iti__cz{height:14px;background-position:-1247px 0px}.iti__flag.iti__de{height:12px;background-position:-1269px 0px}.iti__flag.iti__dg{height:10px;background-position:-1291px 0px}.iti__flag.iti__dj{height:14px;background-position:-1313px 0px}.iti__flag.iti__dk{height:15px;background-position:-1335px 0px}.iti__flag.iti__dm{height:10px;background-position:-1357px 0px}.iti__flag.iti__do{height:14px;background-position:-1379px 0px}.iti__flag.iti__dz{height:14px;background-position:-1401px 0px}.iti__flag.iti__ea{height:14px;background-position:-1423px 0px}.iti__flag.iti__ec{height:14px;background-position:-1445px 0px}.iti__flag.iti__ee{height:13px;background-position:-1467px 0px}.iti__flag.iti__eg{height:14px;background-position:-1489px 0px}.iti__flag.iti__eh{height:10px;background-position:-1511px 0px}.iti__flag.iti__er{height:10px;background-position:-1533px 0px}.iti__flag.iti__es{height:14px;background-position:-1555px 0px}.iti__flag.iti__et{height:10px;background-position:-1577px 0px}.iti__flag.iti__eu{height:14px;background-position:-1599px 0px}.iti__flag.iti__fi{height:12px;background-position:-1621px 0px}.iti__flag.iti__fj{height:10px;background-position:-1643px 0px}.iti__flag.iti__fk{height:10px;background-position:-1665px 0px}.iti__flag.iti__fm{height:11px;background-position:-1687px 0px}.iti__flag.iti__fo{height:15px;background-position:-1709px 0px}.iti__flag.iti__fr{height:14px;background-position:-1731px 0px}.iti__flag.iti__ga{height:15px;background-position:-1753px 0px}.iti__flag.iti__gb{height:10px;background-position:-1775px 0px}.iti__flag.iti__gd{height:12px;background-position:-1797px 0px}.iti__flag.iti__ge{height:14px;background-position:-1819px 0px}.iti__flag.iti__gf{height:14px;background-position:-1841px 0px}.iti__flag.iti__gg{height:14px;background-position:-1863px 0px}.iti__flag.iti__gh{height:14px;background-position:-1885px 0px}.iti__flag.iti__gi{height:10px;background-position:-1907px 0px}.iti__flag.iti__gl{height:14px;background-position:-1929px 0px}.iti__flag.iti__gm{height:14px;background-position:-1951px 0px}.iti__flag.iti__gn{height:14px;background-position:-1973px 0px}.iti__flag.iti__gp{height:14px;background-position:-1995px 0px}.iti__flag.iti__gq{height:14px;background-position:-2017px 0px}.iti__flag.iti__gr{height:14px;background-position:-2039px 0px}.iti__flag.iti__gs{height:10px;background-position:-2061px 0px}.iti__flag.iti__gt{height:13px;background-position:-2083px 0px}.iti__flag.iti__gu{height:11px;background-position:-2105px 0px}.iti__flag.iti__gw{height:10px;background-position:-2127px 0px}.iti__flag.iti__gy{height:12px;background-position:-2149px 0px}.iti__flag.iti__hk{height:14px;background-position:-2171px 0px}.iti__flag.iti__hm{height:10px;background-position:-2193px 0px}.iti__flag.iti__hn{height:10px;background-position:-2215px 0px}.iti__flag.iti__hr{height:10px;background-position:-2237px 0px}.iti__flag.iti__ht{height:12px;background-position:-2259px 0px}.iti__flag.iti__hu{height:10px;background-position:-2281px 0px}.iti__flag.iti__ic{height:14px;background-position:-2303px 0px}.iti__flag.iti__id{height:14px;background-position:-2325px 0px}.iti__flag.iti__ie{height:10px;background-position:-2347px 0px}.iti__flag.iti__il{height:15px;background-position:-2369px 0px}.iti__flag.iti__im{height:10px;background-position:-2391px 0px}.iti__flag.iti__in{height:14px;background-position:-2413px 0px}.iti__flag.iti__io{height:10px;background-position:-2435px 0px}.iti__flag.iti__iq{height:14px;background-position:-2457px 0px}.iti__flag.iti__ir{height:12px;background-position:-2479px 0px}.iti__flag.iti__is{height:15px;background-position:-2501px 0px}.iti__flag.iti__it{height:14px;background-position:-2523px 0px}.iti__flag.iti__je{height:12px;background-position:-2545px 0px}.iti__flag.iti__jm{height:10px;background-position:-2567px 0px}.iti__flag.iti__jo{height:10px;background-position:-2589px 0px}.iti__flag.iti__jp{height:14px;background-position:-2611px 0px}.iti__flag.iti__ke{height:14px;background-position:-2633px 0px}.iti__flag.iti__kg{height:12px;background-position:-2655px 0px}.iti__flag.iti__kh{height:13px;background-position:-2677px 0px}.iti__flag.iti__ki{height:10px;background-position:-2699px 0px}.iti__flag.iti__km{height:12px;background-position:-2721px 0px}.iti__flag.iti__kn{height:14px;background-position:-2743px 0px}.iti__flag.iti__kp{height:10px;background-position:-2765px 0px}.iti__flag.iti__kr{height:14px;background-position:-2787px 0px}.iti__flag.iti__kw{height:10px;background-position:-2809px 0px}.iti__flag.iti__ky{height:10px;background-position:-2831px 0px}.iti__flag.iti__kz{height:10px;background-position:-2853px 0px}.iti__flag.iti__la{height:14px;background-position:-2875px 0px}.iti__flag.iti__lb{height:14px;background-position:-2897px 0px}.iti__flag.iti__lc{height:10px;background-position:-2919px 0px}.iti__flag.iti__li{height:12px;background-position:-2941px 0px}.iti__flag.iti__lk{height:10px;background-position:-2963px 0px}.iti__flag.iti__lr{height:11px;background-position:-2985px 0px}.iti__flag.iti__ls{height:14px;background-position:-3007px 0px}.iti__flag.iti__lt{height:12px;background-position:-3029px 0px}.iti__flag.iti__lu{height:12px;background-position:-3051px 0px}.iti__flag.iti__lv{height:10px;background-position:-3073px 0px}.iti__flag.iti__ly{height:10px;background-position:-3095px 0px}.iti__flag.iti__ma{height:14px;background-position:-3117px 0px}.iti__flag.iti__mc{height:15px;background-position:-3139px 0px}.iti__flag.iti__md{height:10px;background-position:-3160px 0px}.iti__flag.iti__me{height:10px;background-position:-3182px 0px}.iti__flag.iti__mf{height:14px;background-position:-3204px 0px}.iti__flag.iti__mg{height:14px;background-position:-3226px 0px}.iti__flag.iti__mh{height:11px;background-position:-3248px 0px}.iti__flag.iti__mk{height:10px;background-position:-3270px 0px}.iti__flag.iti__ml{height:14px;background-position:-3292px 0px}.iti__flag.iti__mm{height:14px;background-position:-3314px 0px}.iti__flag.iti__mn{height:10px;background-position:-3336px 0px}.iti__flag.iti__mo{height:14px;background-position:-3358px 0px}.iti__flag.iti__mp{height:10px;background-position:-3380px 0px}.iti__flag.iti__mq{height:14px;background-position:-3402px 0px}.iti__flag.iti__mr{height:14px;background-position:-3424px 0px}.iti__flag.iti__ms{height:10px;background-position:-3446px 0px}.iti__flag.iti__mt{height:14px;background-position:-3468px 0px}.iti__flag.iti__mu{height:14px;background-position:-3490px 0px}.iti__flag.iti__mv{height:14px;background-position:-3512px 0px}.iti__flag.iti__mw{height:14px;background-position:-3534px 0px}.iti__flag.iti__mx{height:12px;background-position:-3556px 0px}.iti__flag.iti__my{height:10px;background-position:-3578px 0px}.iti__flag.iti__mz{height:14px;background-position:-3600px 0px}.iti__flag.iti__na{height:14px;background-position:-3622px 0px}.iti__flag.iti__nc{height:10px;background-position:-3644px 0px}.iti__flag.iti__ne{height:15px;background-position:-3666px 0px}.iti__flag.iti__nf{height:10px;background-position:-3686px 0px}.iti__flag.iti__ng{height:10px;background-position:-3708px 0px}.iti__flag.iti__ni{height:12px;background-position:-3730px 0px}.iti__flag.iti__nl{height:14px;background-position:-3752px 0px}.iti__flag.iti__no{height:15px;background-position:-3774px 0px}.iti__flag.iti__np{height:15px;background-position:-3796px 0px}.iti__flag.iti__nr{height:10px;background-position:-3811px 0px}.iti__flag.iti__nu{height:10px;background-position:-3833px 0px}.iti__flag.iti__nz{height:10px;background-position:-3855px 0px}.iti__flag.iti__om{height:10px;background-position:-3877px 0px}.iti__flag.iti__pa{height:14px;background-position:-3899px 0px}.iti__flag.iti__pe{height:14px;background-position:-3921px 0px}.iti__flag.iti__pf{height:14px;background-position:-3943px 0px}.iti__flag.iti__pg{height:15px;background-position:-3965px 0px}.iti__flag.iti__ph{height:10px;background-position:-3987px 0px}.iti__flag.iti__pk{height:14px;background-position:-4009px 0px}.iti__flag.iti__pl{height:13px;background-position:-4031px 0px}.iti__flag.iti__pm{height:14px;background-position:-4053px 0px}.iti__flag.iti__pn{height:10px;background-position:-4075px 0px}.iti__flag.iti__pr{height:14px;background-position:-4097px 0px}.iti__flag.iti__ps{height:10px;background-position:-4119px 0px}.iti__flag.iti__pt{height:14px;background-position:-4141px 0px}.iti__flag.iti__pw{height:13px;background-position:-4163px 0px}.iti__flag.iti__py{height:11px;background-position:-4185px 0px}.iti__flag.iti__qa{height:8px;background-position:-4207px 0px}.iti__flag.iti__re{height:14px;background-position:-4229px 0px}.iti__flag.iti__ro{height:14px;background-position:-4251px 0px}.iti__flag.iti__rs{height:14px;background-position:-4273px 0px}.iti__flag.iti__ru{height:14px;background-position:-4295px 0px}.iti__flag.iti__rw{height:14px;background-position:-4317px 0px}.iti__flag.iti__sa{height:14px;background-position:-4339px 0px}.iti__flag.iti__sb{height:10px;background-position:-4361px 0px}.iti__flag.iti__sc{height:10px;background-position:-4383px 0px}.iti__flag.iti__sd{height:10px;background-position:-4405px 0px}.iti__flag.iti__se{height:13px;background-position:-4427px 0px}.iti__flag.iti__sg{height:14px;background-position:-4449px 0px}.iti__flag.iti__sh{height:10px;background-position:-4471px 0px}.iti__flag.iti__si{height:10px;background-position:-4493px 0px}.iti__flag.iti__sj{height:15px;background-position:-4515px 0px}.iti__flag.iti__sk{height:14px;background-position:-4537px 0px}.iti__flag.iti__sl{height:14px;background-position:-4559px 0px}.iti__flag.iti__sm{height:15px;background-position:-4581px 0px}.iti__flag.iti__sn{height:14px;background-position:-4603px 0px}.iti__flag.iti__so{height:14px;background-position:-4625px 0px}.iti__flag.iti__sr{height:14px;background-position:-4647px 0px}.iti__flag.iti__ss{height:10px;background-position:-4669px 0px}.iti__flag.iti__st{height:10px;background-position:-4691px 0px}.iti__flag.iti__sv{height:12px;background-position:-4713px 0px}.iti__flag.iti__sx{height:14px;background-position:-4735px 0px}.iti__flag.iti__sy{height:14px;background-position:-4757px 0px}.iti__flag.iti__sz{height:14px;background-position:-4779px 0px}.iti__flag.iti__ta{height:10px;background-position:-4801px 0px}.iti__flag.iti__tc{height:10px;background-position:-4823px 0px}.iti__flag.iti__td{height:14px;background-position:-4845px 0px}.iti__flag.iti__tf{height:14px;background-position:-4867px 0px}.iti__flag.iti__tg{height:13px;background-position:-4889px 0px}.iti__flag.iti__th{height:14px;background-position:-4911px 0px}.iti__flag.iti__tj{height:10px;background-position:-4933px 0px}.iti__flag.iti__tk{height:10px;background-position:-4955px 0px}.iti__flag.iti__tl{height:10px;background-position:-4977px 0px}.iti__flag.iti__tm{height:14px;background-position:-4999px 0px}.iti__flag.iti__tn{height:14px;background-position:-5021px 0px}.iti__flag.iti__to{height:10px;background-position:-5043px 0px}.iti__flag.iti__tr{height:14px;background-position:-5065px 0px}.iti__flag.iti__tt{height:12px;background-position:-5087px 0px}.iti__flag.iti__tv{height:10px;background-position:-5109px 0px}.iti__flag.iti__tw{height:14px;background-position:-5131px 0px}.iti__flag.iti__tz{height:14px;background-position:-5153px 0px}.iti__flag.iti__ua{height:14px;background-position:-5175px 0px}.iti__flag.iti__ug{height:14px;background-position:-5197px 0px}.iti__flag.iti__um{height:11px;background-position:-5219px 0px}.iti__flag.iti__un{height:14px;background-position:-5241px 0px}.iti__flag.iti__us{height:11px;background-position:-5263px 0px}.iti__flag.iti__uy{height:14px;background-position:-5285px 0px}.iti__flag.iti__uz{height:10px;background-position:-5307px 0px}.iti__flag.iti__va{height:15px;background-position:-5329px 0px}.iti__flag.iti__vc{height:14px;background-position:-5346px 0px}.iti__flag.iti__ve{height:14px;background-position:-5368px 0px}.iti__flag.iti__vg{height:10px;background-position:-5390px 0px}.iti__flag.iti__vi{height:14px;background-position:-5412px 0px}.iti__flag.iti__vn{height:14px;background-position:-5434px 0px}.iti__flag.iti__vu{height:12px;background-position:-5456px 0px}.iti__flag.iti__wf{height:14px;background-position:-5478px 0px}.iti__flag.iti__ws{height:10px;background-position:-5500px 0px}.iti__flag.iti__xk{height:15px;background-position:-5522px 0px}.iti__flag.iti__ye{height:14px;background-position:-5544px 0px}.iti__flag.iti__yt{height:14px;background-position:-5566px 0px}.iti__flag.iti__za{height:14px;background-position:-5588px 0px}.iti__flag.iti__zm{height:14px;background-position:-5610px 0px}.iti__flag.iti__zw{height:10px;background-position:-5632px 0px}.iti__flag{height:15px;box-shadow:0px 0px 1px 0px #888;background-image:url(\\\"https://cdn.salla.network/images/flags.png\\\");background-repeat:no-repeat;background-color:#f5f7f9;background-position:20px 0}@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi){.iti__flag{background-image:url(\\\"https://cdn.salla.network/images/flags@2x.png\\\")}}.iti__flag.iti__np{background-color:transparent}\";\n\nconst SallaLocalizationModal = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    var _a, _b;\n    this.languages = [];\n    this.currencies = [];\n    this.isLoading = true;\n    this.language = salla.config.get('user.language_code');\n    this.currency = salla.config.get('user.currency_code');\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.setHost(this.host);\n    salla.event.on('localization::open', () => this.open());\n    salla.lang.onLoaded(() => {\n      var _a;\n      this.languagesTitle = salla.lang.get('common.titles.language');\n      this.currenciesTitle = salla.lang.get('common.titles.currency');\n      (_a = this.btn) === null || _a === void 0 ? void 0 : _a.setText(salla.lang.get('common.elements.ok'));\n    });\n    /**\n     * letting developer to insert his own slot like:\n     * <salla-localization>\n     *   <div slot=\"language\">...{name}....</div>\n     *   <div slot=\"currency\">...{name}....</div>\n     * </salla-localization>\n     * Because scoped templates not supported in stencil );\n     * we made a workaround to pass language & currency attributes, then replace names in rendering\n     */\n    this.languageSlot = ((_a = _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.getElement('[slot=\"language\"]')) === null || _a === void 0 ? void 0 : _a.innerHTML) || '<label class=\"s-localization-modal-label\" for=\"lang-{code}\"><span>{name}</span><div class=\"s-localization-modal-flag flag iti__flag iti__{country_code}\"></div></label>';\n    this.currencySlot = ((_b = _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.getElement('[slot=\"currency\"]')) === null || _b === void 0 ? void 0 : _b.innerHTML) || '<label class=\"s-localization-modal-label\" for=\"currency-{code}\"><span>{name}</span><small class=\"s-localization-modal-currency\">{code}</small></label>';\n  }\n  /**\n   * open the component\n   */\n  async open() {\n    console.log(\"🚀 ~ file: salla-localization-modal.tsx ~ line 59 ~ SallaLocalizationModal ~ open ~ this.modal\", this.modal);\n    return await this.modal.open()\n      .then(() => this.getLanguages())\n      .then(() => this.getCurrencies())\n      .then(() => this.isLoading = false);\n  }\n  /**\n   * Hide the component\n   */\n  async close() {\n    return this.modal.close();\n  }\n  async getLanguages() {\n    this.language = this.language || salla.config.get('user.language_code');\n    return this.languages.length > 1 ? null : await salla.config.languages().then(data => this.languages = data);\n  }\n  async getCurrencies() {\n    this.currency = this.currency || salla.config.get('user.currency_code');\n    return this.currencies.length > 1 ? null : await salla.config.currencies().then(data => this.currencies = Object.values(data || {}));\n  }\n  onChangeCurrency(event) {\n    this.currency = event.target.value;\n  }\n  onChangeLanguage(event) {\n    this.language = event.target.value;\n  }\n  async submit() {\n    let url;\n    this.btn.load()\n      .then(() => {\n      if (!this.currency) {\n        salla.log('There is no currency!');\n        return;\n      }\n      if (this.currency === salla.config.get('user.currency_code', 'SAR')) {\n        return;\n      }\n      url = window.location.href;\n      return salla.currency.api.change(this.currency);\n    })\n      .then(() => this.language === salla.config.get('user.language_code', 'ar') || (url = salla.helpers.addParamToUrl('lang', this.language)))\n      .then(() => this.btn.stop())\n      .then(() => this.close())\n      .then(() => url && (window.location.href = url));\n  }\n  render() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-modal\", { isLoading: this.isLoading, id: \"salla-localization\", class: \"s-hidden\", ref: modal => this.modal = modal, width: \"xs\" }, !this.isLoading ?\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-localization-modal-inner\" }, this.languages.length > 1 ?\n        (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-localization-modal-section\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-localization-modal-title\" }, this.languagesTitle), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-localization-modal-section-inner\" }, this.languages.length < 6 ?\n          this.languages.map(lang => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-localization-modal-item\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { class: \"s-localization-modal-input\", type: \"radio\", checked: this.language == lang.iso_code, onChange: () => this.language = lang.iso_code, name: \"language\", id: 'lang-' + lang.code.toLowerCase(), value: lang.code }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-localization-modal-label-slot\", id: \"language-slot\", innerHTML: this.languageSlot\n              .replace(/\\{name\\}/g, lang.name)\n              .replace(/\\{code\\}/g, lang.code)\n              .replace(/\\{country_code\\}/g, lang.country_code) }))) :\n          (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"select\", { class: \"s-localization-modal-select\", name: \"language\", onChange: e => this.onChangeLanguage(e) }, this.languages.map(lang => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"option\", { value: lang.code, selected: this.language == lang.code }, lang.name)))))\n        : '', this.currencies.length > 1 ?\n        (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-localization-modal-section\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-localization-modal-title\" }, this.currenciesTitle), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-localization-modal-section-inner\" }, this.currencies.length < 6 ?\n          this.currencies.map(currency => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-localization-modal-item\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { class: \"s-localization-modal-input\", type: \"radio\", name: \"currency\", checked: this.currency == currency.code, onChange: () => this.currency = currency.code, id: 'currency-' + currency.code, value: currency.code }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-localization-modal-label-slot\", id: \"currency-slot\", innerHTML: this.currencySlot\n              .replace(/\\{name\\}/g, currency.name)\n              .replace(/\\{code\\}/g, currency.code)\n              .replace(/\\{country_code\\}/g, currency.country_code) }))) :\n          (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"select\", { class: \"s-localization-modal-select\", name: \"currency\", onChange: e => this.onChangeCurrency(e) }, this.currencies.map(currency => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"option\", { value: currency.code, selected: this.currency == currency.code }, currency.name)))))\n        : '', (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { width: \"wide\", ref: btn => this.btn = btn, onClick: () => this.submit() }, salla.lang.get('common.elements.ok')))\n      : ''));\n  }\n  /**\n   * to reduce dom levels we will move slot data into the parent dom\n   */\n  componentDidRender() {\n    this.host.querySelectorAll('#currency-slot').forEach(el => el.replaceWith(el.firstChild));\n    this.host.querySelectorAll('#language-slot').forEach(el => el.replaceWith(el.firstChild));\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nSallaLocalizationModal.style = sallaLocalizationModalCss;\n\nconst sallaLoginModalCss = \"\";\n\nconst SallaLoginModal = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    /**\n     * Does the merchant allow to login using email\n     */\n    this.isEmailAllowed = true;\n    /**\n     * Does the merchant/current location for visitor allow to login using mobile, By default outside KSA is `false`\n     */\n    this.isMobileAllowed = true;\n    /**\n     * Does the merchant require registration with email & mobile\n     */\n    this.isEmailRequired = false;\n    this.regType = 'phone';\n    this.typing = (e, submitMethod) => {\n      const error = e.target.nextElementSibling;\n      e.target.classList.remove('s-has-error');\n      (error === null || error === void 0 ? void 0 : error.classList.contains('s-login-modal-error-message')) && (error.innerText = '');\n      e.key == 'Enter' && submitMethod();\n    };\n    this.loginBySMS = async () => {\n      const { phone, countryCode } = await this.loginTelInput.getValues();\n      const isPhoneValid = await this.loginTelInput.isValid();\n      if (!isPhoneValid)\n        return;\n      this.login(this.smsBtn, { type: 'mobile', phone: phone, country_code: countryCode });\n    };\n    this.loginByEmail = () => {\n      if (!_Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.isValidEmail(this.loginEmail.value)) {\n        this.validateField(this.loginEmail, this.emailErrorMsg);\n        return;\n      }\n      this.login(this.emailBtn, { type: 'email', email: this.loginEmail.value });\n    };\n    this.newUser = async () => {\n      var _a;\n      const { phone: regPhone, countryCode } = this.regType == \"email\" ? await this.regTelInput.getValues() : await this.loginTelInput.getValues(), emailValue = this.regEmail.value || ((_a = this.loginEmail) === null || _a === void 0 ? void 0 : _a.value);\n      await this.newUserValidation();\n      await this.regBtn.load();\n      await this.regBtn.disable();\n      let data = {\n        first_name: this.firstName.value,\n        last_name: this.lastName.value,\n        phone: regPhone || this.loginTelInput.phone,\n        country_code: countryCode,\n        verified_by: this.regType,\n      };\n      emailValue && (data = Object.assign(Object.assign({}, data), { email: emailValue }));\n      this.verifyTab.getCode()\n        .then(code => salla.auth.api.register(Object.assign(Object.assign({}, data), { code })))\n        .then(() => salla.auth.canRedirect && window.location.reload())\n        .catch(() => this.regBtn.stop() && this.regBtn.enable());\n    };\n    this.title = this.host.title || salla.lang.get('blocks.header.login');\n    this.host.removeAttribute('title');\n    salla.lang.onLoaded(() => {\n      var _a, _b, _c, _d;\n      this.title = salla.lang.get('blocks.header.login');\n      this.loginTypeTitle = salla.lang.get('blocks.header.select_login_way');\n      this.loginText = salla.lang.get('blocks.header.login');\n      this.smsLabel = salla.lang.get('blocks.header.sms');\n      this.mobileLabel = salla.lang.get('common.elements.mobile');\n      this.emailLabel = salla.lang.get('common.elements.email');\n      this.bySMSText = salla.lang.get('blocks.header.login_by_sms');\n      this.byEmailText = salla.lang.get('blocks.header.login_by_email');\n      this.emailErrorMsg = salla.lang.get('common.elements.email_is_valid');\n      this.firstNameLabel = salla.lang.get('blocks.header.your_name');\n      this.lastNameLabel = salla.lang.get('pages.profile.last_name');\n      this.firstNameErrorMsg = salla.lang.get('common.errors.field_required', { attribute: this.firstNameLabel });\n      this.lastNameErrorMsg = salla.lang.get('common.errors.field_required', { attribute: this.lastNameLabel });\n      (_a = this.modal) === null || _a === void 0 ? void 0 : _a.setTitle(this.title);\n      (_b = this.smsBtn) === null || _b === void 0 ? void 0 : _b.setText(salla.lang.get('blocks.header.enter'));\n      (_c = this.emailBtn) === null || _c === void 0 ? void 0 : _c.setText(salla.lang.get('blocks.header.enter'));\n      (_d = this.regBtn) === null || _d === void 0 ? void 0 : _d.setText(salla.lang.get('blocks.header.register'));\n    });\n    salla.auth.event.onVerificationFailed(() => {\n      //\n    });\n    salla.event.on('login::open', (event) => this.open(event));\n    salla.event.on('twilight::initiated', () => {\n      this.isEmailAllowed = salla.config.get('store.settings.auth.email_allowed', this.isEmailAllowed);\n      this.isMobileAllowed = salla.config.get('store.settings.auth.mobile_allowed', this.isMobileAllowed);\n      this.isEmailRequired = salla.config.get('store.settings.auth.is_email_required', this.isEmailRequired);\n    });\n  }\n  /**\n   * @param {CustomEvent|{details:{case:'new_customer'|'authenticated', redirect_url:string|null}}} event\n   */\n  onVerified(event) {\n    var _a, _b;\n    salla.log('verified', event);\n    //there is a case when force login is activated & is new user, it will return case inside error key., so cover it.\n    let verifyCase = ((_a = event.detail) === null || _a === void 0 ? void 0 : _a.data.case) || ((_b = event.detail) === null || _b === void 0 ? void 0 : _b.error.case);\n    if (!verifyCase) {\n      salla.log('verified but without case!');\n      return;\n    }\n    if (verifyCase === \"new_customer\") {\n      return this.showTab(this.registrationTab);\n    }\n    if (!salla.auth.canRedirect()) {\n      salla.log('Will not auto redirect or reload, due to `salla.auth.canRedirect()`');\n      return;\n    }\n    if (event.detail.data.redirect_url) {\n      return window.location.href = event.data.redirect_url;\n    }\n    window.location.reload();\n  }\n  /**\n   * Open login component\n   */\n  // @ts-ignore\n  async open(event = null) {\n    // todo :: support change the settings from event details\n    // if(event && event.hasOwnProperty('isEmailAllowed')){\n    //   this.isEmailAllowed = event?.isEmailAllowed;\n    // }\n    //\n    // if(event && event.hasOwnProperty('isMobileAllowed')){\n    //   this.isMobileAllowed = event?.isMobileAllowed;\n    // }\n    if (this.isEmailAllowed && this.isMobileAllowed) {\n      this.showTab(this.homeTab);\n    }\n    else if (this.isEmailAllowed) {\n      this.showTab(this.emailTab);\n    }\n    else if (this.isMobileAllowed) {\n      this.showTab(this.mobileTab);\n    }\n    return this.modal.open();\n  }\n  showTab(tab, evt) {\n    var _a, _b;\n    evt === null || evt === void 0 ? void 0 : evt.preventDefault();\n    let tabs = [this.homeTab, this.mobileTab, this.emailTab, this.verifyTab, this.registrationTab];\n    tabs.map(el => _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(el, 'visible', 's-hidden', () => el == tab));\n    setTimeout(() => tabs.map(el => _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(el, 's-login-modal-active', 's-login-modal-unactive', () => el == tab)), 200);\n    //we should have only one salla-login, so it's okay to get it from document\n    //todo:: use better way for resize the modal\n    setTimeout(() => { var _a; return (_a = this.modal.querySelector('.s-login-modal-wrapper')) === null || _a === void 0 ? void 0 : _a.setAttribute('style', 'height:' + (tab === null || tab === void 0 ? void 0 : tab.scrollHeight) + 'px'); });\n    if ([this.mobileTab, this.emailTab].includes(tab)) {\n      this.regType = tab === this.mobileTab ? 'phone' : 'email';\n    }\n    let isRegistrationTab = tab == this.registrationTab;\n    (_a = tab.querySelector('input')) === null || _a === void 0 ? void 0 : _a.focus(); // focus the first input in tab\n    (_b = this.modal) === null || _b === void 0 ? void 0 : _b.setTitle(isRegistrationTab ? salla.lang.get('common.titles.registration') : this.title);\n    if (!isRegistrationTab) {\n      _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(this.regMobileBlock, 's-hidden', 's-show', () => this.regType === 'phone')\n        .toggleElementClassIf(this.regEmailBlock, 's-hidden', 's-show', () => this.regType === 'email');\n    }\n    return this;\n  }\n  login(btn, data) {\n    btn.load()\n      .then(() => btn.disable())\n      .then(() => salla.auth.api.login(data))\n      .then(() => this.showTab(this.verifyTab))\n      .then(() => this.verifyTab.open(data))\n      .finally(() => btn.stop() && btn.enable());\n  }\n  async newUserValidation() {\n    const isLogByPhone = this.regType == \"phone\", isLogByEmail = this.regType == \"email\", emailValue = this.regEmail.value || (isLogByEmail && this.loginEmail.value), isEmailValid = _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.isValidEmail(emailValue), isFirstNameValid = this.firstName.value.length > 0, isLastNameValid = this.lastName.value.length > 0, isPhoneValid = await this.regTelInput.isValid() || isLogByPhone && await this.loginTelInput.isValid(), emailValidation = (emailValue && isEmailValid) || (!emailValue && !this.isEmailRequired);\n    if (emailValidation && isPhoneValid && isFirstNameValid && isLastNameValid)\n      return;\n    !isEmailValid && this.validateField(this.regEmail, this.emailErrorMsg);\n    !isFirstNameValid && this.validateField(this.firstName, this.firstNameErrorMsg);\n    !isLastNameValid && this.validateField(this.lastName, this.lastNameErrorMsg);\n    throw ('Please insert required fields');\n  }\n  // eslint-disable-next-line @stencil/own-methods-must-be-private\n  validateField(field, errorMsg) {\n    field.classList.add('s-has-error');\n    field.nextElementSibling['innerText'] = '* ' + errorMsg;\n  }\n  render() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-modal\", { id: \"salla-login\", icon: \"sicon-user\", \"modal-title\": this.title, ref: modal => this.modal = modal, width: \"xs\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-login-modal-wrapper\" }, this.isEmailAllowed && this.isMobileAllowed ?\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-login-modal-tab\", ref: tab => this.homeTab = tab }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"p\", { class: \"s-login-modal-sub-title\" }, this.loginTypeTitle), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"before-login-type\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"a\", { href: \"#\", class: \"s-login-modal-main-btn\", onClick: (evt) => this.showTab(this.mobileTab, evt) }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"i\", { class: \"s-login-modal-main-btn-icon sicon-phone\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-login-modal-main-btn-text\" }, this.smsLabel), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"i\", { class: \"sicon-keyboard_arrow_left arrow\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"a\", { href: \"#\", class: \"s-login-modal-main-btn\", onClick: (evt) => this.showTab(this.emailTab, evt) }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"i\", { class: \"s-login-modal-main-btn-icon sicon-mail\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-login-modal-main-btn-text\" }, this.emailLabel), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"i\", { class: \"sicon-keyboard_arrow_left arrow\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"after-login-type\" }))\n      : '', this.isMobileAllowed ?\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-login-modal-tab\", ref: tab => this.mobileTab = tab }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"before-login-mobile\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-login-modal-label\" }, this.mobileLabel), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-tel-input\", { ref: el => this.loginTelInput = el, onKeyDown: e => this.typing(e, this.loginBySMS) }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { \"loader-position\": 'center', width: \"wide\", onClick: () => this.loginBySMS(), ref: b => this.smsBtn = b }, salla.lang.get('blocks.header.enter')), this.isEmailAllowed ?\n        (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"a\", { href: \"#\", onClick: () => this.showTab(this.emailTab), class: \"s-login-modal-link\" }, this.byEmailText) : '', (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"after-login-mobile\" })) : '', this.isEmailAllowed ?\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-login-modal-tab\", ref: tab => this.emailTab = tab }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"before-login-email\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-login-modal-label\" }, this.emailLabel), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"email\", ref: el => this.loginEmail = el, onKeyDown: e => this.typing(e, this.loginByEmail), placeholder: \"your@email.com\", class: \"s-login-modal-input s-ltr\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-login-modal-error-message\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { \"loader-position\": 'center', width: \"wide\", onClick: () => this.loginByEmail(), ref: b => this.emailBtn = b }, salla.lang.get('blocks.header.enter')), this.isMobileAllowed ?\n        (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"a\", { href: \"#\", onClick: () => this.showTab(this.mobileTab), class: \"s-login-modal-link\" }, this.bySMSText)\n        : '', (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"after-login-email\" })) : '', (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-verify\", { display: \"inline\", ref: tab => this.verifyTab = tab, autoReload: false }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"a\", { onClick: () => this.showTab(this.regType == 'phone' ? this.mobileTab : this.emailTab), class: \"s-verify-back sicon-arrow-right\", slot: \"after-footer\", href: \"#\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { ref: tab => this.registrationTab = tab }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"before-registration\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", null, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-login-modal-label\" }, this.firstNameLabel), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"text\", class: \"s-login-modal-input\", ref: el => this.firstName = el, onKeyDown: e => this.typing(e, this.newUser), placeholder: salla.lang.get('pages.profile.first_name') }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-login-modal-error-message\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", null, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-login-modal-label\" }, this.lastNameLabel), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"text\", class: \"s-login-modal-input\", ref: el => this.lastName = el, onKeyDown: e => this.typing(e, this.newUser), placeholder: salla.lang.get('pages.profile.last_name') }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-login-modal-error-message\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { ref: el => this.regMobileBlock = el, class: \"mb-1.5\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-login-modal-label\" }, this.mobileLabel), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-tel-input\", { ref: el => this.regTelInput = el, onKeyDown: e => this.typing(e, this.newUser) })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { ref: el => this.regEmailBlock = el, class: \"mb-1.5\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-login-modal-label\" }, this.emailLabel), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"email\", ref: el => this.regEmail = el, onKeyDown: e => this.typing(e, this.newUser), placeholder: \"your@email.com\", class: \"s-login-modal-input s-ltr\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-login-modal-error-message\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { \"loader-position\": 'center', width: \"wide\", onClick: () => this.newUser(), ref: b => this.regBtn = b }, salla.lang.get('blocks.header.register')), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"after-registration\" })))));\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nSallaLoginModal.style = sallaLoginModalCss;\n\nconst sallaModalCss = \"\";\n\nconst SallaModal = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.isClosable = true; //todo::rename unclude. Suggestion => persistent\n    /**\n     * The size of the modal\n     */\n    this.width = 'md';\n    /**\n     * The position of the modal\n     */\n    this.position = 'middle';\n    /**\n     * open the modal on rendering\n     */\n    this.visible = false;\n    /**\n     * Show loading in the middle\n     */\n    this.isLoading = false;\n    this.subTitleFirst = false; //todo:: choose better name\n    this.noPadding = false; //todo:: choose better name\n    this.subTitle = '';\n    /**\n     * Icon css class, default for types `error` is `sicon-alert-engine`, `success` is `sicon-check-circle2`\n     */\n    this.icon = '';\n    this.iconStyle = '';\n    /**\n     * url of an image\n     */\n    this.imageIcon = '';\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.setHost(this.host);\n    salla.event.on('modal::open', target => target == this.host.id && this.open());\n    salla.event.on('modal::close', target => target == this.host.id && this.close());\n    this.modalTitle = this.host.getAttribute('modal-title');\n    // close modal on Escape button clicked\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.onKeyUp(document.body, e => e.keyCode === 27 && this.closeModal());\n  }\n  handleVisible(newValue) {\n    if (!newValue) {\n      salla.event.dispatch('modalClosed');\n      this.toggleModal(false);\n      return;\n    }\n    salla.event.dispatch('modalOpened');\n    this.host.classList.remove('s-hidden');\n    setTimeout(() => this.toggleModal(true)); //small amont of time to running toggle After adding hidden\n  }\n  /**\n   * Open the modal\n   */\n  async open() {\n    this.host.setAttribute('visible', '');\n    return this.host;\n  }\n  /**\n   * close the modal\n   */\n  async close() {\n    this.host.removeAttribute('visible');\n    return this.host;\n  }\n  /**\n   * Change the Modal Title\n   * @param {string} modalTitle\n   */\n  async setTitle(modalTitle) {\n    this.modalTitle = modalTitle;\n    return this.host;\n  }\n  /**\n   * Start loading\n   */\n  async loading() {\n    this.isLoading = true;\n    return this.host;\n  }\n  /**\n   * Stop the loading\n   */\n  async stopLoading() {\n    this.isLoading = false;\n    return this.host;\n  }\n  toggleModal(isOpen) {\n    const body = this.host.querySelector('.s-modal-body');\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(body, 's-modal-entering', 's-modal-leaving', () => isOpen)\n      .toggleElementClassIf(this.overlay, 's-modal-entering', 's-modal-overlay-leaving', () => isOpen)\n      .toggleElementClassIf(document.body, 'modal-is-open', 'modal-is-closed', () => isOpen);\n    if (!isOpen) {\n      setTimeout(() => this.host.classList.add('s-hidden'), 350);\n    }\n  }\n  closeModal() {\n    if (!this.isClosable) {\n      return;\n    }\n    this.host.removeAttribute('visible');\n  }\n  iconBlockClasses() {\n    return {\n      's-modal-icon': true,\n      's-modal-bg-error': this.iconStyle == 'error',\n      's-modal-bg-success': this.iconStyle == 'success',\n      's-modal-bg-normal': this.iconStyle != 'error' && this.iconStyle != 'success',\n      's-modal-bg-primary': this.iconStyle == 'primary'\n    };\n  }\n  iconClasses() {\n    return {\n      [this.icon]: true,\n      'sicon-alert-engine': !this.icon && this.iconStyle == 'error' && !this.imageIcon,\n      'sicon-check-circle2': !this.icon && this.iconStyle == 'success' && !this.imageIcon,\n    };\n  }\n  //todo:: pref for each modal\n  render() {\n    this.host.id = this.host.id || 'salla-modal';\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: 'salla-modal s-modal s-modal-container s-hidden', \"aria-modal\": \"true\", role: \"dialog\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-modal-overlay\", ref: el => this.overlay = el, onClick: () => this.closeModal() }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-modal-wrapper\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: 's-modal-spacer s-modal-align-' + this.position }, \"\\u200B\"), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: 's-modal-body ' + 's-modal-align-' + this.position + ' s-modal-' + this.width + (this.noPadding ? ' s-modal-nopadding' : ' s-modal-padding') }, this.isLoading ?\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-modal-loader-wrap\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-modal-loader\" }))\n      :\n        [\n          (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: { 's-modal-header': true, 's-modal-is-center': this.icon != '' || this.imageIcon != '' } }, this.isClosable ?\n            (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"button\", { class: \"s-modal-close\", onClick: () => this.closeModal(), type: \"button\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"sicon-cancel\" }))\n            : '', (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-modal-header-inner\" }, this.iconStyle || this.icon\n            ? (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: this.iconBlockClasses() }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"i\", { class: this.iconClasses() }))\n            : this.imageIcon ? (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { class: \"s-modal-header-img\", src: this.imageIcon }) : '', (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-modal-header-content\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: { 's-modal-title': true, 's-modal-title-below': this.subTitleFirst }, innerHTML: this.modalTitle }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"p\", { class: { 's-modal-sub-title': true }, innerHTML: this.subTitle })))),\n          (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", null),\n          (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"footer\" })\n        ]))));\n  }\n  //move the modal as root dom, because we need the model to be outside the forms\n  componentDidLoad() {\n    document.body.append(this.host);\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n  static get watchers() { return {\n    \"visible\": [\"handleVisible\"]\n  }; }\n};\nSallaModal.style = sallaModalCss;\n\nconst sallaOfferModalCss = \"\";\n\nconst SallaOfferModal = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    var _a, _b;\n    this.offer = null;\n    this.offer_expires_in = salla.lang.get('pages.products.offer_expires_in');\n    this.remember_my_choice = salla.lang.get('commone.remember_my_choice');\n    this.add_to_cart = salla.lang.get('pages.cart.add_to_cart');\n    this.out_of_stock = salla.lang.get('pages.products.out_of_stock');\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.setHost(this.host);\n    salla.lang.onLoaded(() => {\n      this.offer_expires_in = salla.lang.get('pages.products.offer_expires_in');\n      this.remember_my_choice = salla.lang.get('common.elements.remember_my_choice');\n      this.add_to_cart = salla.lang.get('pages.cart.add_to_cart');\n      this.out_of_stock = salla.lang.get('pages.products.out_of_stock');\n    });\n    this.categorySlot = ((_a = _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.getElement('[slot=\"category\"]')) === null || _a === void 0 ? void 0 : _a.innerHTML) || '<i class=\"s-offer-modal-badge-icon sicon-tag\"></i><span class=\"s-offer-modal-badge-text\">{name}</span>';\n    this.productSlot = ((_b = _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.getElement('[slot=\"product\"]')) === null || _b === void 0 ? void 0 : _b.innerHTML) || this.defaultProductSlot();\n    salla.product.event.onOfferExisted(offer => {\n      if (salla.storage.get('remember-offer-' + offer.id)) {\n        salla.log('User selected to don\\'t show this offer again.');\n        return;\n      }\n      this.open(offer.product_id);\n    });\n  }\n  /**\n   * Show the available offers for the product\n   * @param product_id\n   */\n  async open(product_id) {\n    //TODO:: make sure there is only one offer\n    return salla.product.offers(product_id)\n      .then(response => this.showOffer(response.data[0]));\n  }\n  /**\n   * Show offer details\n   * @param {Offer} offer\n   */\n  async showOffer(offer) {\n    this.offer = offer;\n    this.offer_name = offer.name;\n    this.offer_message = offer.message;\n    this.modal.setTitle(this.offer_name);\n    return this.modal.open();\n  }\n  rememberMe(event) {\n    console.log(\"🚀 ~ file: salla-offer-modal.tsx ~ line 75 ~ SallaOfferModal ~ rememberMe ~ rememberMe\", event);\n    salla.storage.set('remember-offer-' + this.offer.id, event.target.checked);\n  }\n  //todo:: pass event then use sallaButton from it\n  addItem() {\n    // this here, is sallaButton\n    this['load']();\n    return salla.cart.api\n      .quickAdd(this['dataset'].id)\n      .finally(() => this['stop']());\n  }\n  defaultProductSlot() {\n    return '<a href={url} class=\"s-offer-modal-product-image-wrap\"><img class=\"s-offer-modal-product-image\" src=\"{image}\" /></a>' +\n      '<div class=\"s-offer-modal-product-info\">' +\n      '   <a href={url} class=\"s-offer-modal-product-name\">{name}</a>' +\n      '   <div class=\"s-offer-modal-product-price\">{price}</div>' +\n      '</div>';\n  }\n  render() {\n    var _a, _b;\n    return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-modal\", { id: \"salla-offer-modal\", \"sub-title-first\": true, icon: \"sicon-special-discount\", \"sub-title\": this.offer_message, ref: modal => this.modal = modal, \"is-loading\": this.offer === null }, this.offer !== null\n      ? [(0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-offer-modal-scrolled-slider-wrap\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-offer-modal-body s-offer-modal-scrolled-slider\" }, ((_a = this.offer.get.categories) === null || _a === void 0 ? void 0 : _a.length) > 0\n          ? this.offer.get.categories.map(category => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"a\", { href: category.urls.customer, class: \"s-offer-modal-badge s-offer-modal-slider-item\", innerHTML: this.categorySlot\n              .replace(/\\{name\\}/g, category.name)\n              .replace(/\\{url\\}/g, category.urls.customer) }))\n          : (_b = this.offer.get.products) === null || _b === void 0 ? void 0 : _b.map(product => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: { \"s-offer-modal-product\": true, \"s-offer-modal-slider-item\": true, \"s-offer-modal-not-available\": !product.is_available }, id: 'product_' + product.id, innerHTML: this.productSlot\n              .replace(/\\{name\\}/g, product.name)\n              .replace(/\\{url\\}/g, product.url)\n              .replace(/\\{image\\}/g, product.thumbnail)\n              .replace(/\\{price\\}/g, product.has_special_price\n              ? salla.money(product.price) + '<span class=\"s-offer-modal-product-old-price\">' + salla.money(product.regular_price) + '</span>'\n              : salla.money(product.price)) }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-offer-modal-btn-wrap\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { width: \"wide\", fill: 'outline', \"data-id\": product.id, disabled: !product.is_available, \"loader-position\": \"center\", onClick: this.addItem }, product.is_available ? this.add_to_cart : this.out_of_stock))))), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-offer-modal-slider-nav\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"button\", { class: \"s-offer-modal-nav-btn s-offer-modal-prev-btn\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-offer-modal-nav-btn-icon sicon-keyboard_arrow_left\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"button\", { class: \"s-offer-modal-nav-btn s-offer-modal-next-btn\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-offer-modal-nav-btn-icon sicon-keyboard_arrow_right\" })))), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-offer-modal-footer\", slot: \"footer\" }, this.offer.formatted_date ?\n          (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"p\", { class: \"s-offer-modal-expiry\" }, this.offer_expires_in, \" \", this.offer.formatted_date)\n          : '', (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-offer-modal-remember-label\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"checkbox\", onChange: e => this.rememberMe(e), class: \"s-offer-modal-remember-input\" }), \"\\u00A0 \", this.remember_my_choice)),\n      ] : '');\n  }\n  componentDidRender() {\n    // Sooo mini Slider\n    if (this.offer && window.screen.width > 639) {\n      let sliderWrap = this.modal.querySelector('.s-offer-modal-scrolled-slider-wrap'), slider = this.modal.querySelector('.s-offer-modal-scrolled-slider'), navButtons = this.modal.querySelectorAll('.s-offer-modal-nav-btn'), nexBtn = this.modal.querySelector('.s-offer-modal-next-btn'), prevBtn = this.modal.querySelector('.s-offer-modal-prev-btn'), items = this.modal.querySelectorAll('.s-offer-modal-slider-item'), sliderNavMargin = 20, // space before displaying the next/prev btns.\n      current = 0, // current slide\n      slidesToScroll = 3, itemsLength = items.length;\n      console.log('items[0]:', items[0]);\n      let itemSize = items[0].offsetWidth, sliderSize = itemsLength * itemSize, sliderWrapperSize = sliderWrap.offsetWidth, sliderInvisibleSize = sliderSize - sliderWrapperSize, isRTL = document.body.classList.contains('rtl') ? true : false;\n      if (sliderInvisibleSize > sliderNavMargin)\n        nexBtn.classList.add('s-offer-modal-btn-is-active');\n      window.onresize = function () {\n        sliderWrapperSize = sliderWrap.offsetWidth;\n        sliderInvisibleSize = sliderSize - sliderWrapperSize;\n      };\n      slider.addEventListener('scroll', function () {\n        let sliderPosition = Math.abs(slider.scrollLeft);\n        let sliderEndOffset = sliderInvisibleSize - sliderNavMargin;\n        // show & hide the navigation btns depending on scroll position\n        if (sliderPosition <= sliderNavMargin) {\n          nexBtn.classList.add('s-offer-modal-btn-is-active');\n          prevBtn.classList.remove('s-offer-modal-btn-is-active');\n        }\n        else if (sliderPosition < sliderEndOffset) {\n          // show both btns in the middle\n          nexBtn.classList.add('s-offer-modal-btn-is-active');\n          prevBtn.classList.add('s-offer-modal-btn-is-active');\n        }\n        else if (sliderPosition >= sliderEndOffset) {\n          nexBtn.classList.remove('s-offer-modal-btn-is-active');\n          prevBtn.classList.add('s-offer-modal-btn-is-active');\n        }\n      });\n      // Navigation\n      navButtons.forEach(btn => {\n        btn.addEventListener('click', function () {\n          btn.classList.contains('s-offer-modal-next-btn') ? current++ : current--;\n          slider.scrollTo({\n            top: 0,\n            left: itemSize * slidesToScroll * current * (isRTL ? -1 : 1),\n            behavior: 'smooth'\n          });\n        });\n      });\n    }\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nSallaOfferModal.style = sallaOfferModalCss;\n\nconst sallaProductAvailabilityCss = \"\";\n\nconst SallaProductAvailability = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.isUser = _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.isUser();\n    this.emailPlaceholder = 'your@email.com';\n    /**\n     * product id that can visitor subscribe to its availability notification\n     */\n    this.productId = salla.config.get('page.id');\n    /**\n     * is current user already subscribed\n     */\n    this.isSubscribed = false;\n    // @Method()\n    this.submit = async () => {\n      console.log(\"🚀 ~ file: salla-product-availability.tsx ~ line 74 ~ SallaProductAvailability ~ submit= ~ submit\");\n      if (this.isUser) {\n        return salla.api.product.availabilitySubscribe(this.productId)\n          .then(() => this.isSubscribed = true);\n      }\n      let data = { id: this.productId };\n      if (this.channels_.includes('sms')) {\n        let { phone, countryCode } = await this.mobileInput.getValues();\n        data['country_code'] = countryCode;\n        data['phone'] = phone;\n      }\n      if (this.channels_.includes('email')) {\n        this.email.value !== '' && (data['email'] = this.email.value);\n      }\n      await this.validateform();\n      return this.btn.load()\n        .then(() => this.btn.disable())\n        .then(() => salla.api.product.availabilitySubscribe(data))\n        .then(() => {\n        this.isSubscribed = true;\n        salla.storage.set(`product-${this.productId}-subscribed`, true);\n      }) //no need to wait until finishing alert animation\n        .then(() => this.btn.stop())\n        .then(() => this.modal.close())\n        .catch(() => this.btn.stop() && this.btn.enable());\n    };\n    // helpers\n    this.typing = (e, submitMethod) => {\n      const error = e.target.nextElementSibling;\n      e.target.classList.remove('s-has-error');\n      (error === null || error === void 0 ? void 0 : error.classList.contains('s-product-availability-error-msg')) && (error.innerText = '');\n      e.key == 'Enter' && submitMethod();\n    };\n    salla.lang.onLoaded(() => {\n      var _a, _b, _c, _d;\n      // console.log('translations:', salla.lang);\n      this.subscribedMessage = salla.lang.get('pages.products.notify_availability_success');\n      this.title_ = this.host.title || salla.lang.get('pages.products.notify_availability_title');\n      this.subTitle = salla.lang.get('pages.products.notify_availability_subtitle');\n      this.mobileLabel = salla.lang.get('common.elements.mobile');\n      this.emailLabel = salla.lang.get('common.elements.email');\n      this.emailPlaceholder = salla.lang.get('common.elements.email_placeholder') || 'your@email.com';\n      this.emailErrorMsg = salla.lang.get('common.elements.email_is_valid');\n      (_a = this.modal) === null || _a === void 0 ? void 0 : _a.setTitle(this.title_);\n      (_b = this.btn) === null || _b === void 0 ? void 0 : _b.setText(salla.lang.get('common.elements.submit'));\n      (_c = this.cancelBtn) === null || _c === void 0 ? void 0 : _c.setText(salla.lang.get('common.elements.cancel'));\n      (_d = this.inlineBtn) === null || _d === void 0 ? void 0 : _d.setText(salla.lang.get('pages.products.notify_availability'));\n    });\n    if (this.isUser)\n      return;\n    this.channelsWatcher(this.channels);\n    this.title_ = this.host.title || salla.lang.get('pages.products.notify_availability_title');\n    this.host.removeAttribute('title');\n    this.isVisitorSubscribed = salla.storage.get(`product-${this.productId}-subscribed`);\n  }\n  channelsWatcher(newValue) {\n    this.channels_ = !!newValue ? newValue.split(',') : [];\n  }\n  async validateform() {\n    try {\n      if (this.channels_.includes('email')) {\n        const isEmailValid = _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.isValidEmail(this.email.value);\n        if (isEmailValid)\n          return;\n        !isEmailValid && this.validateField(this.email, this.emailErrorMsg);\n      }\n      if (this.channels_.includes('sms')) {\n        const isPhoneValid = await this.mobileInput.isValid();\n        if (isPhoneValid)\n          return;\n      }\n    }\n    catch (error) {\n      throw ('Please insert required fields');\n    }\n  }\n  validateField(field, errorMsg) {\n    field.classList.add('s-has-error');\n    field.nextElementSibling['innerText'] = '* ' + errorMsg;\n  }\n  render() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: \"s-product-availability-wrap\" }, this.isSubscribed || this.isVisitorSubscribed\n      ? (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-product-availability-subscribed\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"i\", { class: \"sicon-bell-ring s-product-availability-subs-icon\" }), \" \", this.subscribedMessage)\n      :\n        (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { width: \"wide\", onClick: () => this.isUser ? this.submit() : this.modal.open(), ref: btn => this.inlineBtn = btn }, salla.lang.get('pages.products.notify_availability')), this.isUser || this.isSubscribed || this.isVisitorSubscribed ? '' : this.renderModal()));\n  }\n  renderModal() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-modal\", { ref: modal => this.modal = modal, \"modal-title\": this.title_, subTitle: this.subTitle, icon: \"sicon-bell-ring\", width: \"sm\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-product-availability-body\" }, this.channels_.includes('email') ? [\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-product-availability-label\" }, this.emailLabel),\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { class: \"s-product-availability-input\", onKeyDown: e => this.typing(e, this.submit), placeholder: this.emailPlaceholder, ref: el => this.email = el, type: \"email\" }),\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-product-availability-error-msg\" })\n    ] : '', this.channels_.includes('sms') ? [\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"s-product-availability-label\" }, this.mobileLabel),\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-tel-input\", { ref: el => this.mobileInput = el, onKeyDown: e => this.typing(e, this.submit) })\n    ] : ''), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { slot: \"footer\", class: \"s-product-availability-footer\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { class: \"modal-cancel-btn\", width: \"wide\", color: \"light\", fill: \"outline\", onClick: () => this.modal.close(), ref: btn => this.cancelBtn = btn }, salla.lang.get('common.elements.cancel')), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { class: \"submit-btn\", \"loader-position\": 'center', width: \"wide\", ref: btn => this.btn = btn, onClick: () => this.submit() }, salla.lang.get('common.elements.submit')))));\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n  static get watchers() { return {\n    \"channels\": [\"channelsWatcher\"]\n  }; }\n};\nSallaProductAvailability.style = sallaProductAvailabilityCss;\n\nconst sallaRatingModalCss = \"\";\n\nconst SallaRatingModal = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.stepsCount = 0;\n    this.currentIndex = 0;\n    this.submitted = [];\n    /**\n     * The order id, to rate on its products & shipping\n     */\n    this.orderId = salla.config.get('page.id');\n    this.rate_the_store = salla.lang.get('pages.rating.rate_the_store');\n    this.write_store_rate = salla.lang.get('pages.rating.write_store_rate');\n    this.rate_product_stars = salla.lang.get('pages.rating.rate_product_stars');\n    this.write_product_rate = salla.lang.get('pages.rating.write_product_rate');\n    this.rate_shipping = salla.lang.get('pages.rating.rate_shipping');\n    this.write_shipping_rate = salla.lang.get('pages.rating.write_shipping_rate');\n    this.thanks = salla.lang.get('pages.rating.thanks');\n    this.back = salla.lang.get('common.elements.back');\n    this.next = salla.lang.get('common.elements.next');\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.setHost(document);\n    salla.event.on('rating::open', () => this.open());\n    salla.lang.onLoaded(() => {\n      this.rate_the_store = salla.lang.get('pages.rating.rate_the_store');\n      this.write_store_rate = salla.lang.get('pages.rating.write_store_rate');\n      this.rate_product_stars = salla.lang.get('pages.rating.rate_product_stars');\n      this.write_product_rate = salla.lang.get('pages.rating.write_product_rate');\n      this.rate_shipping = salla.lang.get('pages.rating.rate_shipping');\n      this.write_shipping_rate = salla.lang.get('pages.rating.write_shipping_rate');\n      this.thanks = salla.lang.get('pages.rating.thanks');\n      this.back = salla.lang.get('common.elements.back');\n      this.next = salla.lang.get('common.elements.next');\n    });\n  }\n  /**\n   * Show the rating modal\n   */\n  async open() {\n    return this.modal.open()\n      .then(() => this.order || salla.rating.api.order(this.orderId).then(res => this.order = res.data))\n      .then(() => this.modal.setTitle(salla.lang.get('pages.rating.rate_order') + ' <span class=\"unicode\">(#' + this.order.id + ')</span>'))\n      .then(() => this.modal.stopLoading())\n      .then(() => this.stepsCount = [this.order.testimonials_enabled, this.order.products_enabled, this.order.shipping_enabled].filter(enabled => enabled).length)\n      .then(() => setTimeout(() => this.handleWizard(), 100));\n  }\n  /**\n   * Show the rating modal\n   */\n  async close() {\n    return this.modal.close();\n  }\n  // handle wizard\n  handleWizard() {\n    this.steps = this.modal.querySelectorAll(\".s-rating-modal-step\");\n    this.dots = this.modal.querySelectorAll(\".s-rating-modal-step-dot\");\n    this.showActiveStep();\n  }\n  showActiveStep(current = null) {\n    var _a;\n    this.currentTab = current || this.steps[this.currentIndex];\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleClassIf('.s-rating-modal-step-dot', 's-rating-modal-bg-gray', 's-rating-modal-bg-primary', dot => dot != this.dots[this.currentIndex])\n      .toggleClassIf('.s-rating-modal-step', 's-rating-modal-active', 's-rating-modal-hidden', tab => tab == this.currentTab);\n    if (this.currentIndex != 0) {\n      // the animation\n      _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(this.currentTab, 's-rating-modal-unactive', 's-rating-modal-hidden', () => true);\n      setTimeout(() => _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(this.currentTab, 's-rating-modal-active', 's-rating-modal-unactive', () => true), 300);\n    }\n    // Btn text\n    let nextType = (_a = this.steps[this.currentIndex + 1]) === null || _a === void 0 ? void 0 : _a.dataset.type;\n    this.nextBtn.setText(nextType ? salla.lang.get('pages.rating.rate') + ' ' + salla.lang.get('pages.rating.' + nextType)\n      : salla.lang.get('pages.rating.send_ratings'));\n    setTimeout(() => { var _a; return this.body.setAttribute('style', 'height:' + ((_a = this.currentTab) === null || _a === void 0 ? void 0 : _a.scrollHeight) + 'px'); });\n  }\n  previousTab() {\n    this.currentIndex > 0 && this.currentIndex--;\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(this.backBtn, 's-rating-modal-unvisiable', 'block', () => this.currentIndex == 0);\n    this.showActiveStep();\n  }\n  submit() {\n    this.submittedBefore() || this.validate();\n    salla.config.canLeave = false;\n    this.nextBtn.load()\n      .then(() => this.submittedBefore() || this.sendFeedback())\n      .then(() => this.currentTab.querySelectorAll('[name],.s-rating-modal-btn-star').forEach(el => el.setAttribute('disabled', '')))\n      .then(() => this.currentIndex < this.stepsCount && this.currentIndex++)\n      .then(() => this.showActiveStep())\n      .then(() => _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleClassIf('#prev-btn', 'block', 's-rating-modal-unvisiable', () => true))\n      .finally(() => {\n      this.nextBtn.stop();\n      salla.config.canLeave = true;\n      this.currentIndex == this.stepsCount && this.showThankYou();\n      this.modal.isClosable = false;\n    });\n  }\n  submittedBefore() {\n    return this.submitted.includes(this.currentIndex);\n  }\n  validate(rating = null, type = null) {\n    if (!rating && this.currentTab.dataset.type == 'products') {\n      return this.currentTab.querySelectorAll('.rating-outer-form').forEach(rating => this.validate(rating, 'product'));\n    }\n    rating = rating || this.currentTab;\n    let stars = rating.querySelector('.rating_hidden_input').value;\n    let comment = rating.querySelector('.s-rating-modal-comment');\n    let validationMessage = rating.querySelector('.s-rating-modal-validation-msg');\n    if (stars && comment.value && comment.value.length > 3) {\n      comment.classList.remove('s-has-error');\n      validationMessage.innerHTML = '';\n      return;\n    }\n    type = type || rating['dataset'].type;\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(comment, 'save', 's-has-error', el => el.value.length > 3);\n    throw validationMessage.innerHTML = stars\n      ? (salla.lang.get('common.errors.not_less_than_chars', { chars: 4 }) + ' ' + comment.getAttribute('placeholder'))\n      : salla.lang.get(`pages.rating.rate_${type}_stars`).replace(' (:item)', '');\n  }\n  sendFeedback() {\n    let data = {};\n    this.currentTab.querySelectorAll('[name]').forEach((input) => {\n      //decode names like `<input name=\"jamal[inner]\" value=\"hi\">` to be {name:jamal, value: {inner:\"hi\"}}\n      let inputData = salla.helpers.inputData(input.name, input.value, data);\n      data[inputData.name] = inputData.value;\n    });\n    if (Object.keys(data).length == 0) {\n      return;\n    }\n    data['order_id'] = this.orderId;\n    data['type'] = this.currentTab.dataset.type;\n    this.submitted.push(this.currentIndex);\n    return salla.rating.api[this.currentTab.dataset.type](data);\n  }\n  showThankYou() {\n    let seconds = 10;\n    let timeToClose = setInterval(() => {\n      this.thanksTime.innerHTML = '00:0' + (seconds--);\n      if (seconds > 0) {\n        return;\n      }\n      clearInterval(timeToClose);\n      this.thanksTime.remove();\n      this.close().then(() => window.location.reload());\n    }, 1000);\n    this.modal.querySelector('.s-rating-modal-footer').classList.add('s-rating-modal-unvisiable');\n    this.showActiveStep(this.thanksTab);\n  }\n  render() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.H, { id: \"s-rating\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-modal\", { isLoading: true, width: \"md\", ref: modal => this.modal = modal }, this.order\n      ? [(0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-wrapper\", ref: el => this.body = el }, this.order.testimonials_enabled ?\n          (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rating-outer-form s-rating-modal-step-wrap s-rating-modal-step s-rating-modal-hidden\", \"data-type\": \"store\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-rounded-icon\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { src: salla.config.get('store.logo', 'https://assets.salla.sa/cp/assets/images/logo-new.png'), alt: \"store name\", class: \"s-rating-modal-store-logo\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"h2\", { class: \"s-rating-modal-title\" }, this.rate_the_store), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-stars-company\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-rating-stars\", { size: \"large\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"textarea\", { id: \"storeReview\", name: \"comment\", class: \"s-rating-modal-comment\", placeholder: this.write_store_rate }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"small\", { class: \"s-rating-modal-validation-msg\" }))\n          : '', this.order.products_enabled\n          ? (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"section\", { class: \"s-rating-modal-step s-rating-modal-hidden\", \"data-type\": \"products\" }, this.order.products.map((item, index) => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rating-outer-form s-rating-modal-product\", \"data-stars-error\": this.rate_product_stars }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-product-img-wrap\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { src: item.product.thumbnail, alt: item.product.name, class: \"s-rating-modal-product-img\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-product-details\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"h3\", { class: \"s-rating-modal-product-title\" }, \" \", item.product.name), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-stars-product\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-rating-stars\", { size: \"small\", name: `products[${index}][rating]` })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"hidden\", name: `products[${index}][product_id]`, value: item.product.id }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"textarea\", { placeholder: this.write_product_rate, name: `products[${index}][comment]`, class: \"s-rating-modal-comment\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"small\", { class: \"s-rating-modal-validation-msg\" })))))\n          : '', this.order.shipping_enabled\n          ? (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rating-outer-form s-rating-modal-step-wrap s-rating-modal-step s-rating-modal-hidden\", \"data-type\": \"shipping\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"hidden\", name: \"shipping_company_id\", value: this.order.shipping.company.id }), this.order.shipping.company.logo\n            ? (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-rounded-icon\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"img\", { src: this.order.shipping.company.logo, class: \"s-rating-modal-shipping-logo\", alt: this.order.shipping.company.name }))\n            : (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-rating-modal-icon sicon-shipping-fast\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-title\" }, \" \", this.rate_shipping + ' ' + this.order.shipping.company.name), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-stars-company\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-rating-stars\", { size: \"large\" })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"textarea\", { name: \"comment\", class: \"s-rating-modal-comment\", placeholder: this.write_shipping_rate }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"small\", { class: \"s-rating-modal-validation-msg\" }))\n          : '', (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-thanks s-rating-modal-hidden\", ref: el => this.thanksTab = el }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-rating-modal-icon sicon-check-circle2\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"h3\", { class: \"s-rating-modal-thanks-title\" }, this.thanks), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-thanks-msg\", innerHTML: this.order.thanks_message }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"time\", { class: \"s-rating-modal-thanks-time\", ref: el => this.thanksTime = el }))), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-modal-footer\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"button\", { ref: el => this.backBtn = el, onClick: () => this.previousTab(), class: \"s-rating-modal-btn s-rating-modal-unvisiable\" }, this.back), this.stepsCount > 1 ? (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"ul\", { class: \"s-rating-modal-dots\" }, [0, 1, 2].slice(0, this.stepsCount).map(() => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"li\", { class: 's-rating-modal-bg-gray s-rating-modal-step-dot' }))) : '', (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { \"loader-position\": 'center', ref: el => this.nextBtn = el, onClick: () => this.submit() }, this.next)),]\n      : '')));\n  }\n  componentDidLoad() {\n    salla.event.dispatch('rating::ready', this);\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nSallaRatingModal.style = sallaRatingModalCss;\n\nconst sallaRatingStarsCss = \"\";\n\nconst SallaRatingStars = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.name = 'rating';\n    this.size = 'medium';\n  }\n  initiateRating() {\n    this.host.addEventListener('click', () => {\n      if (!this.startsElem)\n        return;\n      // Get the selected star - activeElement is not supported in safari\n      let activeStars = this.startsElem.querySelectorAll('.s-rating-stars-hovered');\n      let selected = activeStars[activeStars.length - 1];\n      if (!selected)\n        return;\n      let selectedIndex = selected.getAttribute('data-star');\n      this.startsElem.querySelector('.rating_hidden_input').value = selectedIndex;\n      // Loop through each star, and add or remove the `.selected` class to toggle highlighting\n      this.startsElem.querySelectorAll('.s-rating-stars-btn-star')\n        .forEach((star, index) => _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(star, 's-rating-stars-selected', 's-rating-stars-unselected', () => index < parseInt(selectedIndex)));\n      // update aria-pressed attr status\n      this.startsElem.querySelectorAll('[aria-pressed]').forEach(star => star.removeAttribute('aria-pressed'));\n      selected.setAttribute('aria-pressed', 'true');\n    });\n  }\n  highlightSelectedStars() {\n    var _a, _b;\n    let hoveredClass = 's-rating-stars-hovered', stars = (_a = this.startsElem) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.s-rating-stars-btn-star');\n    stars === null || stars === void 0 ? void 0 : stars.forEach((star, index) => {\n      star.addEventListener('mouseover', () => {\n        for (let i = 0; i <= index; i++) {\n          stars[i].classList.add(hoveredClass);\n        }\n      });\n      star.addEventListener('mouseout', () => star.classList.remove(hoveredClass));\n    });\n    (_b = this.startsElem) === null || _b === void 0 ? void 0 : _b.addEventListener('mouseout', () => stars.forEach(star => star.classList.remove(hoveredClass)));\n  }\n  createStars(n) {\n    let stars = [];\n    for (let i = 0; i < 5; i++) {\n      stars.push((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: {\n          's-rating-stars-btn-star sicon-star2': true,\n          ['s-rating-stars-' + this.size]: true,\n          's-rating-stars-selected': i < n\n        } }));\n    }\n    return stars;\n  }\n  render() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.value ?\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-stars-wrapper\" }, \" \", this.createStars(this.value), \" \")\n      :\n        (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-rating-stars-element\", ref: (el) => this.startsElem = el }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"hidden\", class: \"rating_hidden_input\", name: this.name, value: \"\" }), [1, 2, 3, 4, 5].map(star => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"button\", { class: `s-rating-stars-btn-star s-rating-stars-` + this.size, \"data-star\": star }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"i\", { class: \"sicon-star2\" }))))));\n  }\n  componentDidLoad() {\n    this.initiateRating();\n    this.highlightSelectedStars();\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nSallaRatingStars.style = sallaRatingStarsCss;\n\nconst sallaSearchCss = \"\";\n\nconst SallaSearch = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    var _a;\n    this.inputValue = '';\n    this.typing = false;\n    this.debounce = setTimeout(() => '', 1000);\n    this.inline = false;\n    this.oval = false;\n    this.height = 60;\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.setHost(this.host);\n    this.productSlot = ((_a = _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.getElement('[slot=\"product\"]')) === null || _a === void 0 ? void 0 : _a.innerHTML) || this.getDefaultProductSlot();\n    salla.event.on('search::open', () => this.modal.open());\n    salla.lang.onLoaded(() => {\n      this.placeholder = salla.lang.get('blocks.header.search_placeholder');\n      this.noResultsText = salla.lang.get('common.elements.no_options');\n    });\n    salla.event.on('modalOpened', () => this.onModalOpen());\n    salla.event.on('modalClosed', () => this.onModalClose());\n  }\n  ;\n  onModalOpen() {\n    setTimeout(() => this.searchInput.focus(), 300);\n  }\n  onModalClose() {\n    this.searchInput.value = '';\n    this.results = undefined;\n    this.afterSearching();\n    this.container.classList.remove('s-search-no-results');\n  }\n  getDefaultProductSlot() {\n    return '<div class=\"s-search-product-image-container\">' +\n      '  <img class=\"s-search-product-image\" src=\"{image}\" alt=\"{name}\"/>' +\n      '</div>' +\n      '<div class=\"s-search-product-details\">' +\n      '  <div class=\"s-search-product-title\">{name}</div> <div class=\"s-search-product-price\">{price} <span class=\"s-search-product-regular-price\">{regular_price}</span></div>' +\n      '</div>';\n  }\n  debounceSearch(event) {\n    this.typing = true;\n    clearTimeout(this.debounce);\n    this.debounce = setTimeout(() => {\n      this.typing = false;\n      this.search_term = event.target.value;\n    }, 500);\n  }\n  handelSearch(val) {\n    this.inputValue = val;\n    if (val.length > 2) {\n      this.search(val);\n    }\n    else {\n      this.results = undefined;\n      this.afterSearching();\n    }\n  }\n  search(val) {\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.hideElement(this.noResults);\n    //run loading spinner or stop it\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(this.searchIcon, 's-search-spinner-loader', 'sicon-search', () => true);\n    salla.product.search(val)\n      .then(response => this.results = response)\n      .catch(err => err !== 'Query is same as previous one!' ? this.results = undefined : null)\n      .finally(() => this.afterSearching(/*isEmpty*/ false));\n  }\n  afterSearching(isEmpty = true) {\n    var _a;\n    this.noResults.style.display = isEmpty || ((_a = this.results) === null || _a === void 0 ? void 0 : _a.data.length) > 0 ? 'none' : 'block';\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.toggleElementClassIf(this.container, 's-search-container-open', 's-search-no-results', () => { var _a; return (_a = this.results) === null || _a === void 0 ? void 0 : _a.data.length; })\n      .toggleElementClassIf(this.searchIcon, 's-search-spinner-loader', 'sicon-search', () => false); //stop searching anime\n    salla.product.api.previousQuery = ''; //avoid having error 'Query is same as previous one!' after reopen modal;\n    this.inputValue.length < 3 ? this.container.classList.remove('s-search-no-results') : '';\n  }\n  render() {\n    var _a;\n    const searchContent = (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: { 's-search-container': true, 's-search-inline': this.inline }, ref: container => this.container = container }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { class: \"s-search-input\", type: \"text\", placeholder: this.placeholder, onInput: e => this.debounceSearch(e), style: { height: this.height + 'px', borderRadius: this.oval ? this.height / 2 + 'px' : '' }, ref: input => this.searchInput = input }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-search-icon-wrap\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"i\", { class: \"s-search-icon sicon-search\", ref: el => this.searchIcon = el })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-search-results\" }, (_a = this.results) === null || _a === void 0 ? void 0 :\n      _a.data.map(item => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"a\", { href: item.url, class: { \"s-search-product\": true, 's-search-product-not-available': !item.is_available }, innerHTML: this.productSlot\n          .replace(/\\{name\\}/g, item.name)\n          .replace(/\\{price\\}/g, salla.money(item.price))\n          .replace(/\\{regular_price\\}/g, item.has_special_price ? salla.money(item.regular_price) : '')\n          .replace(/\\{image\\}/g, item.thumbnail) })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"p\", { ref: el => this.noResults = el, class: \"s-search-no-results-placeholder\" }, this.noResultsText)));\n    return (this.inline ?\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-search-modal\" }, searchContent)\n      :\n        (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-modal\", { position: \"top\", class: \"s-search-modal\", ref: modal => this.modal = modal }, searchContent));\n  }\n  /**\n   * Run it one time after load\n   */\n  componentDidLoad() {\n    this.afterSearching();\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n  static get watchers() { return {\n    \"search_term\": [\"handelSearch\"]\n  }; }\n};\nSallaSearch.style = sallaSearchCss;\n\nfunction createCommonjsModule(fn, basedir, module) {\n\treturn module = {\n\t\tpath: basedir,\n\t\texports: {},\n\t\trequire: function (path, base) {\n\t\t\treturn commonjsRequire();\n\t\t}\n\t}, fn(module, module.exports), module.exports;\n}\n\nfunction commonjsRequire () {\n\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\nvar intlTelInput$1 = createCommonjsModule(function (module) {\n/*\n * International Telephone Input v17.0.18\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    if (module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined$1) {\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"North Macedonia (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n        }\n        var intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {},\n            // using a global like this allows us to mock it in the tests\n            documentReady: function documentReady() {\n                return document.readyState === \"complete\";\n            }\n        };\n        if (typeof window === \"object\") window.intlTelInputGlobals = intlTelInputGlobals;\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // if there is just a dial code in the input: remove it on blur\n            autoHideDialCode: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // don't insert international dial codes\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag so it's not part of the typed number\n            separateDialCode: false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/\n        function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, disable options relating to dial codes\n                    if (this.options.nationalMode) this.options.autoHideDialCode = false;\n                    // if separateDialCode then doesn't make sense to A) insert dial code into input\n                    // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n                    // dial code next to them)\n                    if (this.options.separateDialCode) {\n                        this.options.autoHideDialCode = this.options.nationalMode = false;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n                    }\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) this._translateCountriesByLocale();\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, countryCode, priority) {\n                    if (countryCode.length > this.countryCodeMaxLen) {\n                        this.countryCodeMaxLen = countryCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(countryCode)) {\n                        this.countryCodes[countryCode] = [];\n                    }\n                    // bail if we already have this country for this countryCode\n                    for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n                        if (this.countryCodes[countryCode][i] === iso2) return;\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined$1 ? priority : this.countryCodes[countryCode].length;\n                    this.countryCodes[countryCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    return a.name.localeCompare(b.name);\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodeMaxLen = 0;\n                    // here we store just dial codes\n                    this.dialCodes = {};\n                    // here we store \"country codes\" (both dial codes and their area codes)\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        if (!this.dialCodes[c.dialCode]) this.dialCodes[c.dialCode] = true;\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) this.preferredCountries.push(countryData);\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) forEachProp(attrs, function(key, value) {\n                        return el.setAttribute(key, value);\n                    });\n                    if (container) container.appendChild(el);\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // if autocomplete does not exist on the element and its form, then\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n                    if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                        this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    }\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (this.options.allowDropdown) parentClass += \" iti--allow-dropdown\";\n                    if (this.options.separateDialCode) parentClass += \" iti--separate-dial-code\";\n                    if (this.options.customContainer) {\n                        parentClass += \" \";\n                        parentClass += this.options.customContainer;\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    this.flagsContainer = this._createEl(\"div\", {\n                        \"class\": \"iti__flag-container\"\n                    }, wrapper);\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    this.selectedFlag = this._createEl(\"div\", {\n                        \"class\": \"iti__selected-flag\",\n                        role: \"combobox\",\n                        \"aria-controls\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-owns\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-expanded\": \"false\"\n                    }, this.flagsContainer);\n                    this.selectedFlagInner = this._createEl(\"div\", {\n                        \"class\": \"iti__flag\"\n                    }, this.selectedFlag);\n                    if (this.options.separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.options.allowDropdown) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list iti__hide\",\n                            id: \"iti-\".concat(this.id, \"__country-listbox\"),\n                            role: \"listbox\",\n                            \"aria-label\": \"List of countries\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (this.options.dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"iti iti--container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (this.options.hiddenInput) {\n                        var hiddenInputName = this.options.hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className, preferred) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        var idSuffix = preferred ? \"-preferred\" : \"\";\n                        // open the list item\n                        tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"' aria-selected='false'>\");\n                        // add the flag\n                        tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        // and the country name and dial code\n                        tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    // fix firefox bug: when first load page (with input with value set to number with intl dial\n                    // code) and initialising plugin removes the dial code from the input, then refresh page,\n                    // and we try to init plugin again but this time on number without dial code so get grey flag\n                    var attributeValue = this.telInput.getAttribute(\"value\");\n                    var inputValue = this.telInput.value;\n                    var useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n                    var val = useAttribute ? attributeValue : inputValue;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n                        if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) this._updateValFromNumber(val);\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoHideDialCode) this._initBlurListeners();\n                    if (this.options.allowDropdown) this._initDropdownListeners();\n                    if (this.hiddenInput) this._initHiddenInputListener();\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"iti__hide\")) _this4.telInput.focus(); else e.preventDefault();\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) label.addEventListener(\"click\", this._handleLabelClick);\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") _this4._closeDropdown();\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.documentReady()) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else this.resolveUtilsScriptPromise();\n                    if (this.options.initialCountry === \"auto\") this._loadAutoCountry(); else this.resolveAutoCountryPromise();\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._highlightListItem(listItem, false);\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._selectListItem(listItem);\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) _this9._closeDropdown();\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") _this9._handleUpDownKey(e.key); else if (e.key === \"Enter\") _this9._handleEnterKey(); else if (e.key === \"Escape\") _this9._closeDropdown(); else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) clearTimeout(queryTimer);\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next, true);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n                        number = \"+\".concat(number);\n                    }\n                    // update flag if user types area code for another country\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number, true);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) prevItem.classList.remove(\"iti__highlight\");\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    if (shouldFocus) this.highlightedItem.focus();\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    // update the selected country's title attribute\n                    var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n                    this.selectedFlag.setAttribute(\"title\", title);\n                    if (this.options.separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (this.options.allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            // check if there is a preferred item first, else fall back to standard\n                            var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                            this.selectedFlag.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var flagsContainerClone = this.flagsContainer.cloneNode();\n                    containerClone.appendChild(flagsContainerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    flagsContainerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true);\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n                    // inserting dial code), who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) newScrollTop -= middleOffset;\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) newScrollTop += middleOffset;\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                    } else if (this.options.nationalMode || this.options.separateDialCode) {\n                        // don't do anything\n                        return;\n                    } else {\n                        // nationalMode is disabled\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n                            // no existing value and either they've just selected a list item, or autoHideDialCode is\n                            // disabled: insert new dial code\n                            newNumber = newDialCode;\n                        } else {\n                            return;\n                        }\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number, includeAreaCode) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (includeAreaCode) {\n                                    if (this.countryCodes[numericChars]) {\n                                        // store the actual raw string (useful for matching later)\n                                        dialCode = number.substr(0, i + 1);\n                                    }\n                                } else {\n                                    if (this.dialCodes[numericChars]) {\n                                        dialCode = number.substr(0, i + 1);\n                                        // if we're just looking for a dial code, we can break as soon as we find one\n                                        break;\n                                    }\n                                }\n                                // stop searching as soon as we can - in this case when we hit max len\n                                if (numericChars.length === this.countryCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    // unbind autoHideDialCode listeners\n                    if (this.options.autoHideDialCode) {\n                        if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (!this.selectedFlagInner.classList.contains(\"iti__\".concat(countryCode))) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode, false);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) handleSuccess();\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) handleFailure();\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"17.0.18\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});\n});\n\n/**\n * Exposing intl-tel-input as a component\n */\nvar intlTelInput = intlTelInput$1;\n\nconst sallaTelInputCss = \"@charset \\\"UTF-8\\\";.iti{width:100%;position:relative;display:inline-block}.iti *{box-sizing:border-box;-moz-box-sizing:border-box}.iti__hide{display:none}.iti__v-hide{visibility:hidden}.iti input,.iti input[type=text],.iti input[type=tel]{position:relative;z-index:0;direction:ltr !important;margin-top:0 !important;margin-bottom:0 !important;padding-left:95px !important;padding-right:15px !important;margin-left:0 !important}.iti__flag-container{width:100%;position:absolute;top:0;bottom:0;left:0;padding:1px}.iti__selected-flag{width:80px;z-index:1;position:relative;display:flex;align-items:center;height:100%;float:left;padding:0 15px;box-shadow:none !important;outline:none !important}.ltr .iti__selected-flag{justify-content:flex-end}.iti__selected-flag:before{content:\\\"\\\";display:block;width:1px;height:70%;background:#eee;position:absolute;top:15%;right:0}.iti__selected-flag .iti__flag{display:none}.iti__arrow{width:15px;height:15px;line-height:15px;position:absolute;left:10px;top:50%;transform:translateY(-50%)}.iti__arrow:after{content:\\\"\\\";font-family:sallaicons;font-size:16px;color:#999;opacity:0.65}.iti__arrow--up:after{transform:rotate(180deg)}.iti__country-list{width:100%;max-height:160px;position:absolute;top:100%;left:0;z-index:2;list-style:none;margin:0;padding:0;margin:5px 0 0 0;border-radius:5px;box-shadow:0px 2px 4px 2px rgba(0, 0, 0, 0.05);border:1px solid #f5f7f9;background-color:white;white-space:nowrap;overflow:hidden;overflow-y:auto;-webkit-overflow-scrolling:touch}.iti__country-list::-webkit-scrollbar{width:4px}.dark .iti__country-list{background-color:#52525b;border-color:#52525b}.iti__country-list li{display:flex;align-items:center;justify-content:flex-start;flex-direction:row;padding:8px 10px;transition:background-color 0.3s}.iti__country-list li span{font-size:12px}.iti__country-list li:hover,.iti__country-list li.highlighted{background-color:rgba(0, 0, 0, 0.05)}.iti__country-list--dropup{bottom:100%;top:unset;margin:0 0 5px 0}@media (max-width: 500px){.iti__country-list{white-space:normal}}.iti__flag-box{display:inline-block;width:20px;margin:0 0 0 5px}.iti__divider{padding-bottom:5px;margin-bottom:5px;border-bottom:1px solid #eee}.iti__country{padding:5px 10px;outline:none}.iti__dial-code{font-family:Arial;color:#999;unicode-bidi:plaintext;letter-spacing:1px}.iti__country.iti__highlight{background-color:rgba(0, 0, 0, 0.05)}.iti__flag-box,.iti__country-name,.iti__dial-code{vertical-align:middle}.iti__country-name{flex:auto;margin:0;padding:0 10px;white-space:normal;line-height:1.3}.iti--allow-dropdown .iti__flag-container,.iti--separate-dial-code .iti__flag-container{left:0}.iti--allow-dropdown .iti__flag-container:hover{cursor:pointer}.iti--allow-dropdown input[disabled]+.iti__flag-container:hover,.iti--allow-dropdown input[readonly]+.iti__flag-container:hover{cursor:default}.iti--allow-dropdown input[disabled]+.iti__flag-container:hover .iti__selected-flag,.iti--allow-dropdown input[readonly]+.iti__flag-container:hover .iti__selected-flag{background-color:transparent}.iti--separate-dial-code .iti__selected-dial-code{unicode-bidi:plaintext;direction:ltr;letter-spacing:1px;font-family:\\\"Arial\\\", serif;font-size:13px}.iti--container{position:absolute;top:-1000px;z-index:1060;padding:1px}.iti--container:hover{cursor:pointer}.iti-mobile .iti--container{inset:0;margin:20px;width:calc(100% - 40px);position:fixed;z-index:9999}.iti-mobile .iti__country-list{max-height:100%;width:100%;inset:0}.iti-mobile .iti__country{padding:10px 10px;line-height:1.5em}.iti__flag{width:20px}.iti__flag.iti__be{width:18px}.iti__flag.iti__ch{width:15px}.iti__flag.iti__mc{width:19px}.iti__flag.iti__ne{width:18px}.iti__flag.iti__np{width:13px}.iti__flag.iti__va{width:15px}@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi){.iti__flag{background-size:5652px 15px}}.iti__flag.iti__ac{height:10px;background-position:0px 0px}.iti__flag.iti__ad{height:14px;background-position:-22px 0px}.iti__flag.iti__ae{height:10px;background-position:-44px 0px}.iti__flag.iti__af{height:14px;background-position:-66px 0px}.iti__flag.iti__ag{height:14px;background-position:-88px 0px}.iti__flag.iti__ai{height:10px;background-position:-110px 0px}.iti__flag.iti__al{height:15px;background-position:-132px 0px}.iti__flag.iti__am{height:10px;background-position:-154px 0px}.iti__flag.iti__ao{height:14px;background-position:-176px 0px}.iti__flag.iti__aq{height:14px;background-position:-198px 0px}.iti__flag.iti__ar{height:13px;background-position:-220px 0px}.iti__flag.iti__as{height:10px;background-position:-242px 0px}.iti__flag.iti__at{height:14px;background-position:-264px 0px}.iti__flag.iti__au{height:10px;background-position:-286px 0px}.iti__flag.iti__aw{height:14px;background-position:-308px 0px}.iti__flag.iti__ax{height:13px;background-position:-330px 0px}.iti__flag.iti__az{height:10px;background-position:-352px 0px}.iti__flag.iti__ba{height:10px;background-position:-374px 0px}.iti__flag.iti__bb{height:14px;background-position:-396px 0px}.iti__flag.iti__bd{height:12px;background-position:-418px 0px}.iti__flag.iti__be{height:15px;background-position:-440px 0px}.iti__flag.iti__bf{height:14px;background-position:-460px 0px}.iti__flag.iti__bg{height:12px;background-position:-482px 0px}.iti__flag.iti__bh{height:12px;background-position:-504px 0px}.iti__flag.iti__bi{height:12px;background-position:-526px 0px}.iti__flag.iti__bj{height:14px;background-position:-548px 0px}.iti__flag.iti__bl{height:14px;background-position:-570px 0px}.iti__flag.iti__bm{height:10px;background-position:-592px 0px}.iti__flag.iti__bn{height:10px;background-position:-614px 0px}.iti__flag.iti__bo{height:14px;background-position:-636px 0px}.iti__flag.iti__bq{height:14px;background-position:-658px 0px}.iti__flag.iti__br{height:14px;background-position:-680px 0px}.iti__flag.iti__bs{height:10px;background-position:-702px 0px}.iti__flag.iti__bt{height:14px;background-position:-724px 0px}.iti__flag.iti__bv{height:15px;background-position:-746px 0px}.iti__flag.iti__bw{height:14px;background-position:-768px 0px}.iti__flag.iti__by{height:10px;background-position:-790px 0px}.iti__flag.iti__bz{height:14px;background-position:-812px 0px}.iti__flag.iti__ca{height:10px;background-position:-834px 0px}.iti__flag.iti__cc{height:10px;background-position:-856px 0px}.iti__flag.iti__cd{height:15px;background-position:-878px 0px}.iti__flag.iti__cf{height:14px;background-position:-900px 0px}.iti__flag.iti__cg{height:14px;background-position:-922px 0px}.iti__flag.iti__ch{height:15px;background-position:-944px 0px}.iti__flag.iti__ci{height:14px;background-position:-961px 0px}.iti__flag.iti__ck{height:10px;background-position:-983px 0px}.iti__flag.iti__cl{height:14px;background-position:-1005px 0px}.iti__flag.iti__cm{height:14px;background-position:-1027px 0px}.iti__flag.iti__cn{height:14px;background-position:-1049px 0px}.iti__flag.iti__co{height:14px;background-position:-1071px 0px}.iti__flag.iti__cp{height:14px;background-position:-1093px 0px}.iti__flag.iti__cr{height:12px;background-position:-1115px 0px}.iti__flag.iti__cu{height:10px;background-position:-1137px 0px}.iti__flag.iti__cv{height:12px;background-position:-1159px 0px}.iti__flag.iti__cw{height:14px;background-position:-1181px 0px}.iti__flag.iti__cx{height:10px;background-position:-1203px 0px}.iti__flag.iti__cy{height:14px;background-position:-1225px 0px}.iti__flag.iti__cz{height:14px;background-position:-1247px 0px}.iti__flag.iti__de{height:12px;background-position:-1269px 0px}.iti__flag.iti__dg{height:10px;background-position:-1291px 0px}.iti__flag.iti__dj{height:14px;background-position:-1313px 0px}.iti__flag.iti__dk{height:15px;background-position:-1335px 0px}.iti__flag.iti__dm{height:10px;background-position:-1357px 0px}.iti__flag.iti__do{height:14px;background-position:-1379px 0px}.iti__flag.iti__dz{height:14px;background-position:-1401px 0px}.iti__flag.iti__ea{height:14px;background-position:-1423px 0px}.iti__flag.iti__ec{height:14px;background-position:-1445px 0px}.iti__flag.iti__ee{height:13px;background-position:-1467px 0px}.iti__flag.iti__eg{height:14px;background-position:-1489px 0px}.iti__flag.iti__eh{height:10px;background-position:-1511px 0px}.iti__flag.iti__er{height:10px;background-position:-1533px 0px}.iti__flag.iti__es{height:14px;background-position:-1555px 0px}.iti__flag.iti__et{height:10px;background-position:-1577px 0px}.iti__flag.iti__eu{height:14px;background-position:-1599px 0px}.iti__flag.iti__fi{height:12px;background-position:-1621px 0px}.iti__flag.iti__fj{height:10px;background-position:-1643px 0px}.iti__flag.iti__fk{height:10px;background-position:-1665px 0px}.iti__flag.iti__fm{height:11px;background-position:-1687px 0px}.iti__flag.iti__fo{height:15px;background-position:-1709px 0px}.iti__flag.iti__fr{height:14px;background-position:-1731px 0px}.iti__flag.iti__ga{height:15px;background-position:-1753px 0px}.iti__flag.iti__gb{height:10px;background-position:-1775px 0px}.iti__flag.iti__gd{height:12px;background-position:-1797px 0px}.iti__flag.iti__ge{height:14px;background-position:-1819px 0px}.iti__flag.iti__gf{height:14px;background-position:-1841px 0px}.iti__flag.iti__gg{height:14px;background-position:-1863px 0px}.iti__flag.iti__gh{height:14px;background-position:-1885px 0px}.iti__flag.iti__gi{height:10px;background-position:-1907px 0px}.iti__flag.iti__gl{height:14px;background-position:-1929px 0px}.iti__flag.iti__gm{height:14px;background-position:-1951px 0px}.iti__flag.iti__gn{height:14px;background-position:-1973px 0px}.iti__flag.iti__gp{height:14px;background-position:-1995px 0px}.iti__flag.iti__gq{height:14px;background-position:-2017px 0px}.iti__flag.iti__gr{height:14px;background-position:-2039px 0px}.iti__flag.iti__gs{height:10px;background-position:-2061px 0px}.iti__flag.iti__gt{height:13px;background-position:-2083px 0px}.iti__flag.iti__gu{height:11px;background-position:-2105px 0px}.iti__flag.iti__gw{height:10px;background-position:-2127px 0px}.iti__flag.iti__gy{height:12px;background-position:-2149px 0px}.iti__flag.iti__hk{height:14px;background-position:-2171px 0px}.iti__flag.iti__hm{height:10px;background-position:-2193px 0px}.iti__flag.iti__hn{height:10px;background-position:-2215px 0px}.iti__flag.iti__hr{height:10px;background-position:-2237px 0px}.iti__flag.iti__ht{height:12px;background-position:-2259px 0px}.iti__flag.iti__hu{height:10px;background-position:-2281px 0px}.iti__flag.iti__ic{height:14px;background-position:-2303px 0px}.iti__flag.iti__id{height:14px;background-position:-2325px 0px}.iti__flag.iti__ie{height:10px;background-position:-2347px 0px}.iti__flag.iti__il{height:15px;background-position:-2369px 0px}.iti__flag.iti__im{height:10px;background-position:-2391px 0px}.iti__flag.iti__in{height:14px;background-position:-2413px 0px}.iti__flag.iti__io{height:10px;background-position:-2435px 0px}.iti__flag.iti__iq{height:14px;background-position:-2457px 0px}.iti__flag.iti__ir{height:12px;background-position:-2479px 0px}.iti__flag.iti__is{height:15px;background-position:-2501px 0px}.iti__flag.iti__it{height:14px;background-position:-2523px 0px}.iti__flag.iti__je{height:12px;background-position:-2545px 0px}.iti__flag.iti__jm{height:10px;background-position:-2567px 0px}.iti__flag.iti__jo{height:10px;background-position:-2589px 0px}.iti__flag.iti__jp{height:14px;background-position:-2611px 0px}.iti__flag.iti__ke{height:14px;background-position:-2633px 0px}.iti__flag.iti__kg{height:12px;background-position:-2655px 0px}.iti__flag.iti__kh{height:13px;background-position:-2677px 0px}.iti__flag.iti__ki{height:10px;background-position:-2699px 0px}.iti__flag.iti__km{height:12px;background-position:-2721px 0px}.iti__flag.iti__kn{height:14px;background-position:-2743px 0px}.iti__flag.iti__kp{height:10px;background-position:-2765px 0px}.iti__flag.iti__kr{height:14px;background-position:-2787px 0px}.iti__flag.iti__kw{height:10px;background-position:-2809px 0px}.iti__flag.iti__ky{height:10px;background-position:-2831px 0px}.iti__flag.iti__kz{height:10px;background-position:-2853px 0px}.iti__flag.iti__la{height:14px;background-position:-2875px 0px}.iti__flag.iti__lb{height:14px;background-position:-2897px 0px}.iti__flag.iti__lc{height:10px;background-position:-2919px 0px}.iti__flag.iti__li{height:12px;background-position:-2941px 0px}.iti__flag.iti__lk{height:10px;background-position:-2963px 0px}.iti__flag.iti__lr{height:11px;background-position:-2985px 0px}.iti__flag.iti__ls{height:14px;background-position:-3007px 0px}.iti__flag.iti__lt{height:12px;background-position:-3029px 0px}.iti__flag.iti__lu{height:12px;background-position:-3051px 0px}.iti__flag.iti__lv{height:10px;background-position:-3073px 0px}.iti__flag.iti__ly{height:10px;background-position:-3095px 0px}.iti__flag.iti__ma{height:14px;background-position:-3117px 0px}.iti__flag.iti__mc{height:15px;background-position:-3139px 0px}.iti__flag.iti__md{height:10px;background-position:-3160px 0px}.iti__flag.iti__me{height:10px;background-position:-3182px 0px}.iti__flag.iti__mf{height:14px;background-position:-3204px 0px}.iti__flag.iti__mg{height:14px;background-position:-3226px 0px}.iti__flag.iti__mh{height:11px;background-position:-3248px 0px}.iti__flag.iti__mk{height:10px;background-position:-3270px 0px}.iti__flag.iti__ml{height:14px;background-position:-3292px 0px}.iti__flag.iti__mm{height:14px;background-position:-3314px 0px}.iti__flag.iti__mn{height:10px;background-position:-3336px 0px}.iti__flag.iti__mo{height:14px;background-position:-3358px 0px}.iti__flag.iti__mp{height:10px;background-position:-3380px 0px}.iti__flag.iti__mq{height:14px;background-position:-3402px 0px}.iti__flag.iti__mr{height:14px;background-position:-3424px 0px}.iti__flag.iti__ms{height:10px;background-position:-3446px 0px}.iti__flag.iti__mt{height:14px;background-position:-3468px 0px}.iti__flag.iti__mu{height:14px;background-position:-3490px 0px}.iti__flag.iti__mv{height:14px;background-position:-3512px 0px}.iti__flag.iti__mw{height:14px;background-position:-3534px 0px}.iti__flag.iti__mx{height:12px;background-position:-3556px 0px}.iti__flag.iti__my{height:10px;background-position:-3578px 0px}.iti__flag.iti__mz{height:14px;background-position:-3600px 0px}.iti__flag.iti__na{height:14px;background-position:-3622px 0px}.iti__flag.iti__nc{height:10px;background-position:-3644px 0px}.iti__flag.iti__ne{height:15px;background-position:-3666px 0px}.iti__flag.iti__nf{height:10px;background-position:-3686px 0px}.iti__flag.iti__ng{height:10px;background-position:-3708px 0px}.iti__flag.iti__ni{height:12px;background-position:-3730px 0px}.iti__flag.iti__nl{height:14px;background-position:-3752px 0px}.iti__flag.iti__no{height:15px;background-position:-3774px 0px}.iti__flag.iti__np{height:15px;background-position:-3796px 0px}.iti__flag.iti__nr{height:10px;background-position:-3811px 0px}.iti__flag.iti__nu{height:10px;background-position:-3833px 0px}.iti__flag.iti__nz{height:10px;background-position:-3855px 0px}.iti__flag.iti__om{height:10px;background-position:-3877px 0px}.iti__flag.iti__pa{height:14px;background-position:-3899px 0px}.iti__flag.iti__pe{height:14px;background-position:-3921px 0px}.iti__flag.iti__pf{height:14px;background-position:-3943px 0px}.iti__flag.iti__pg{height:15px;background-position:-3965px 0px}.iti__flag.iti__ph{height:10px;background-position:-3987px 0px}.iti__flag.iti__pk{height:14px;background-position:-4009px 0px}.iti__flag.iti__pl{height:13px;background-position:-4031px 0px}.iti__flag.iti__pm{height:14px;background-position:-4053px 0px}.iti__flag.iti__pn{height:10px;background-position:-4075px 0px}.iti__flag.iti__pr{height:14px;background-position:-4097px 0px}.iti__flag.iti__ps{height:10px;background-position:-4119px 0px}.iti__flag.iti__pt{height:14px;background-position:-4141px 0px}.iti__flag.iti__pw{height:13px;background-position:-4163px 0px}.iti__flag.iti__py{height:11px;background-position:-4185px 0px}.iti__flag.iti__qa{height:8px;background-position:-4207px 0px}.iti__flag.iti__re{height:14px;background-position:-4229px 0px}.iti__flag.iti__ro{height:14px;background-position:-4251px 0px}.iti__flag.iti__rs{height:14px;background-position:-4273px 0px}.iti__flag.iti__ru{height:14px;background-position:-4295px 0px}.iti__flag.iti__rw{height:14px;background-position:-4317px 0px}.iti__flag.iti__sa{height:14px;background-position:-4339px 0px}.iti__flag.iti__sb{height:10px;background-position:-4361px 0px}.iti__flag.iti__sc{height:10px;background-position:-4383px 0px}.iti__flag.iti__sd{height:10px;background-position:-4405px 0px}.iti__flag.iti__se{height:13px;background-position:-4427px 0px}.iti__flag.iti__sg{height:14px;background-position:-4449px 0px}.iti__flag.iti__sh{height:10px;background-position:-4471px 0px}.iti__flag.iti__si{height:10px;background-position:-4493px 0px}.iti__flag.iti__sj{height:15px;background-position:-4515px 0px}.iti__flag.iti__sk{height:14px;background-position:-4537px 0px}.iti__flag.iti__sl{height:14px;background-position:-4559px 0px}.iti__flag.iti__sm{height:15px;background-position:-4581px 0px}.iti__flag.iti__sn{height:14px;background-position:-4603px 0px}.iti__flag.iti__so{height:14px;background-position:-4625px 0px}.iti__flag.iti__sr{height:14px;background-position:-4647px 0px}.iti__flag.iti__ss{height:10px;background-position:-4669px 0px}.iti__flag.iti__st{height:10px;background-position:-4691px 0px}.iti__flag.iti__sv{height:12px;background-position:-4713px 0px}.iti__flag.iti__sx{height:14px;background-position:-4735px 0px}.iti__flag.iti__sy{height:14px;background-position:-4757px 0px}.iti__flag.iti__sz{height:14px;background-position:-4779px 0px}.iti__flag.iti__ta{height:10px;background-position:-4801px 0px}.iti__flag.iti__tc{height:10px;background-position:-4823px 0px}.iti__flag.iti__td{height:14px;background-position:-4845px 0px}.iti__flag.iti__tf{height:14px;background-position:-4867px 0px}.iti__flag.iti__tg{height:13px;background-position:-4889px 0px}.iti__flag.iti__th{height:14px;background-position:-4911px 0px}.iti__flag.iti__tj{height:10px;background-position:-4933px 0px}.iti__flag.iti__tk{height:10px;background-position:-4955px 0px}.iti__flag.iti__tl{height:10px;background-position:-4977px 0px}.iti__flag.iti__tm{height:14px;background-position:-4999px 0px}.iti__flag.iti__tn{height:14px;background-position:-5021px 0px}.iti__flag.iti__to{height:10px;background-position:-5043px 0px}.iti__flag.iti__tr{height:14px;background-position:-5065px 0px}.iti__flag.iti__tt{height:12px;background-position:-5087px 0px}.iti__flag.iti__tv{height:10px;background-position:-5109px 0px}.iti__flag.iti__tw{height:14px;background-position:-5131px 0px}.iti__flag.iti__tz{height:14px;background-position:-5153px 0px}.iti__flag.iti__ua{height:14px;background-position:-5175px 0px}.iti__flag.iti__ug{height:14px;background-position:-5197px 0px}.iti__flag.iti__um{height:11px;background-position:-5219px 0px}.iti__flag.iti__un{height:14px;background-position:-5241px 0px}.iti__flag.iti__us{height:11px;background-position:-5263px 0px}.iti__flag.iti__uy{height:14px;background-position:-5285px 0px}.iti__flag.iti__uz{height:10px;background-position:-5307px 0px}.iti__flag.iti__va{height:15px;background-position:-5329px 0px}.iti__flag.iti__vc{height:14px;background-position:-5346px 0px}.iti__flag.iti__ve{height:14px;background-position:-5368px 0px}.iti__flag.iti__vg{height:10px;background-position:-5390px 0px}.iti__flag.iti__vi{height:14px;background-position:-5412px 0px}.iti__flag.iti__vn{height:14px;background-position:-5434px 0px}.iti__flag.iti__vu{height:12px;background-position:-5456px 0px}.iti__flag.iti__wf{height:14px;background-position:-5478px 0px}.iti__flag.iti__ws{height:10px;background-position:-5500px 0px}.iti__flag.iti__xk{height:15px;background-position:-5522px 0px}.iti__flag.iti__ye{height:14px;background-position:-5544px 0px}.iti__flag.iti__yt{height:14px;background-position:-5566px 0px}.iti__flag.iti__za{height:14px;background-position:-5588px 0px}.iti__flag.iti__zm{height:14px;background-position:-5610px 0px}.iti__flag.iti__zw{height:10px;background-position:-5632px 0px}.iti__flag{height:15px;box-shadow:0px 0px 1px 0px #888;background-image:url(\\\"https://cdn.salla.network/images/flags.png\\\");background-repeat:no-repeat;background-color:#f5f7f9;background-position:20px 0}@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi){.iti__flag{background-image:url(\\\"https://cdn.salla.network/images/flags@2x.png\\\")}}.iti__flag.iti__np{background-color:transparent}\";\n\nconst SallaTelInput = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.enterClicked = (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"enterClicked\", 7);\n    /**\n     * input name\n     */\n    this.name = 'phone';\n    /**\n     * Current country_code\n     */\n    this.countryCode = salla.config.get('user.country_code', 'SA');\n    this.countryCodeLabel = salla.lang.get('common.country_code');\n    this.mobileLabel = salla.lang.get('common.elements.mobile');\n    this.tooShort = salla.lang.get('common.errors.too_short', { attribute: this.mobileLabel });\n    this.tooLong = salla.lang.get('common.errors.too_long', { attribute: this.mobileLabel });\n    this.invalidCountryCode = salla.lang.get('common.errors.invalid_value', { attribute: this.countryCodeLabel });\n    this.invalidNumber = salla.lang.get('common.errors.invalid_value', { attribute: this.mobileLabel });\n    this.errorMap = [this.invalidNumber, this.invalidCountryCode, this.tooShort, this.tooLong, this.invalidNumber];\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.setHost(this.host);\n    salla.lang.onLoaded(() => {\n      this.mobileLabel = salla.lang.get('common.elements.mobile');\n      this.countryCodeLabel = salla.lang.get('common.elements.country_code');\n      this.invalidNumber = salla.lang.get('common.errors.invalid_value', { attribute: this.mobileLabel });\n      this.invalidCountryCode = salla.lang.get('common.errors.invalid_value', { attribute: this.countryCodeLabel });\n      this.tooShort = salla.lang.get('common.errors.too_short', { attribute: this.mobileLabel });\n      this.tooLong = salla.lang.get('common.errors.too_long', { attribute: this.mobileLabel });\n      this.mobileRequired = salla.lang.get('common.errors.field_required', { attribute: this.mobileLabel });\n      this.errorMap = [this.invalidNumber, this.invalidCountryCode, this.tooShort, this.tooLong, this.invalidNumber];\n    });\n  }\n  /**\n   * Get current values\n   * @return {{mobile:number,countryCode:'SA'|string}}\n   */\n  async getValues() {\n    return {\n      [this.name]: this.phone = this.phoneInput.value,\n      countryCode: this.countryCode = this.countryCodeInput.value\n    };\n  }\n  /**\n   * Is current data valid or not\n   * @return {boolean}\n   */\n  async isValid() {\n    this.reset();\n    if (this.iti.isValidNumber())\n      return true;\n    if (!this.phoneInput.value.trim()) {\n      this.phoneInput.classList.add(\"s-has-error\");\n      this.errorMsg.innerText = this.mobileRequired || '';\n      return;\n    }\n    this.phoneInput.classList.add(\"s-has-error\");\n    let errorCode = this.iti.getValidationError();\n    this.errorMsg.innerText = this.errorMap[errorCode] || '';\n    return false;\n  }\n  initTelInput() {\n    salla.helpers.inputDigitsOnly(this.phoneInput);\n    this.iti = intlTelInput(this.phoneInput, {\n      initialCountry: this.countryCode || 'sa',\n      preferredCountries: ['sa', 'ae', 'kw', 'bh', 'qa', 'iq', 'om', 'ye', 'eg', 'jo', 'sy', 'ps', 'sd', 'lb', 'dz', 'tn', 'ma', 'ly'],\n      formatOnDisplay: false,\n      separateDialCode: true,\n      autoPlaceholder: 'aggressive',\n      utilsScript: 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.12/js/utils.min.js',\n    });\n    this.phoneInput.addEventListener(\"countrychange\", () => {\n      let data = this.iti.getSelectedCountryData();\n      this.countryCodeInput.value = data.iso2.toUpperCase();\n    });\n    // on blur: validate\n    // this.phoneInput.addEventListener('blur', () => this.isValid());\n    // on keyup / change flag: reset\n    this.phoneInput.addEventListener('input', e => {\n      salla.helpers.inputDigitsOnly(e.target);\n      this.reset();\n    });\n  }\n  reset() {\n    this.phoneInput.classList.remove(\"s-has-error\");\n    this.errorMsg.innerHTML = \"\";\n  }\n  ;\n  render() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.H, { id: \"s-tel-input\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"tel\", name: this.name, value: this.phone, ref: el => this.phoneInput = el, class: \"s-tel-input-control tel-input s-ltr\" }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: \"s-tel-input-error-msg\", ref: el => this.errorMsg = el }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"hidden\", name: \"country_code\", value: this.countryCode, ref: el => this.countryCodeInput = el, class: \"country_code\" })));\n  }\n  componentDidLoad() {\n    this.initTelInput();\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nSallaTelInput.style = sallaTelInputCss;\n\nconst sallaVerifyCss = \"salla-verify{display:block}\";\n\nconst SallaVerify = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.verified = (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"verified\", 7);\n    this.initiated = false;\n    /**\n     * Should render component without modal\n     */\n    this.display = 'modal';\n    /**\n     * Verifying method\n     */\n    this.type = 'mobile';\n    /**\n     * should auto reloading the page after success verification\n     */\n    this.autoReload = true;\n    this.resendAfter = 30;\n    /**\n     * to use: `salla.api.auth.verify` or `salla.profile.verify`\n     */\n    this.isProfileVerify = false;\n    // Helper.setHost(this.host);\n    salla.lang.onLoaded(() => {\n      var _a, _b;\n      this.title = salla.lang.get('pages.profile.verify_title') + salla.lang.get('common.elements.' + this.type);\n      (_a = this.modal) === null || _a === void 0 ? void 0 : _a.setTitle(this.title);\n      (_b = this.btn) === null || _b === void 0 ? void 0 : _b.setText(salla.lang.get('pages.profile.verify'));\n    });\n    if (this.display == 'inline') {\n      this.modal = { open: () => '', close: () => '', setTitle: () => '' };\n      return;\n    }\n    salla.event.on('profile::verification', data => {\n      var _a;\n      this.isProfileVerify = true;\n      this.open(data);\n      this.title = salla.lang.get('pages.profile.verify_title') + salla.lang.get('common.elements.' + data.type);\n      (_a = this.modal) === null || _a === void 0 ? void 0 : _a.setTitle(this.title);\n    });\n    salla.event.on('modalClosed', () => {\n      this.resendAfter = 0;\n      this.timer.innerHTML = '30 : 00';\n    });\n  }\n  /**\n   * Get current code\n   * @return {string}\n   */\n  async getCode() {\n    return this.code.value;\n  }\n  /**\n   * Open verifying modal\n   * @param data\n   */\n  async open(data) {\n    var _a;\n    this.data = data;\n    this.data.type = this.data.type || this.type;\n    this.type = this.data.type;\n    this.resendTimer();\n    this.otpInputs = this.body.querySelectorAll('.s-verify-input');\n    if (!this.initiated) {\n      _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.on('input', '.s-verify-input', e => salla.helpers.inputDigitsOnly(e.target));\n      _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.onKeyUp('.s-verify-input', event => {\n        var _a, _b, _c, _d;\n        let key = event.keyCode || event.charCode;\n        if (event.target.value) {\n          (_a = event.target.nextElementSibling) === null || _a === void 0 ? void 0 : _a.focus();\n          (_b = event.target.nextElementSibling) === null || _b === void 0 ? void 0 : _b.select();\n        }\n        else if ([8, 46].includes(key)) {\n          (_c = event.target.previousElementSibling) === null || _c === void 0 ? void 0 : _c.focus();\n          (_d = event.target.previousElementSibling) === null || _d === void 0 ? void 0 : _d.select();\n        }\n        this.toggleOTPSubmit();\n      });\n      _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.on('paste', '.s-verify-input', event => {\n        let text = salla.helpers.number(event.clipboardData.getData('text')).replace(/[^0-9.]/g, '').replace('..', '.');\n        this.otpInputs.forEach((input, i) => input.value = text[i] || '');\n        this.toggleOTPSubmit();\n        setTimeout(() => this.otpInputs[3].focus(), 100);\n      });\n      // return this.modal.open();\n      this.initiated = true;\n    }\n    this.reset();\n    this.display == 'modal' && ((_a = this.modal) === null || _a === void 0 ? void 0 : _a.setTitle(this.title));\n    this.modal.open();\n    // focus the first input after opening the modal\n    setTimeout(() => this.otpInputs[0].focus(), 100);\n  }\n  toggleOTPSubmit() {\n    let otp = [];\n    this.otpInputs.forEach(input => input.value && otp.push(input.value));\n    this.code.value = otp.join('');\n    if (otp.length === 4) {\n      this.btn.removeAttribute('disabled');\n      this.btn.click();\n      return;\n    }\n    this.btn.setAttribute('disabled', '');\n  }\n  reset() {\n    this.otpInputs.forEach((input) => input.value = '');\n    this.code.value = '';\n    this.otpInputs[0].focus();\n  }\n  resendTimer() {\n    _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.showElement(this.resendMessage).hideElement(this.resend);\n    this.resendAfter = 30;\n    let timerId = setInterval(() => {\n      if (this.resendAfter <= 0) {\n        clearInterval(timerId);\n        _Helper_e1d414a5_js__WEBPACK_IMPORTED_MODULE_1__.H.hideElement(this.resendMessage).showElement(this.resend);\n      }\n      else {\n        this.timer.innerHTML = `${this.resendAfter >= 10 ? this.resendAfter : '0' + this.resendAfter} : 00`;\n        this.resendAfter--;\n      }\n    }, 1000);\n  }\n  resendCode() {\n    return this.btn.stop()\n      .then(() => this.btn.disable())\n      .then(() => {\n      this.otpInputs.forEach(input => input.value = '');\n      this.otpInputs[0].focus();\n    })\n      .then(() => salla.api.auth.resend(this.data))\n      .finally(() => this.resendTimer());\n  }\n  submit() {\n    let data = Object.assign({ code: this.code.value }, this.data);\n    return this.btn.load()\n      .then(() => this.btn.disable())\n      .then(() => this.isProfileVerify ? salla.profile.verify(data) : salla.auth.verify(data, true))\n      .then(response => this.verified.emit(response))\n      .then(() => this.btn.stop() && this.btn.disable())\n      .then(() => this.modal.close())\n      .then(() => this.autoReload && window.location.reload())\n      .catch(() => this.btn.stop() && this.btn.enable() && this.reset());\n  }\n  render() {\n    return this.display == 'inline' ? (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.myBody()) :\n      (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-modal\", { icon: \"sicon-android-phone\", width: \"xs\", class: \"s-verify\", ref: modal => this.modal = modal, \"modal-title\": this.title }, this.myBody());\n  }\n  myBody() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-verify-body\", ref: body => this.body = body }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-verify-message\", innerHTML: salla.lang.get('pages.profile.verify_message') }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"hidden\", name: \"code\", maxlength: \"4\", required: true, ref: code => this.code = code }), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"s-verify-codes\", dir: \"ltr\" }, [1, 2, 3, 4].map(() => (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"text\", maxlength: \"1\", class: \"s-verify-input\", required: true }))), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { slot: \"footer\", class: \"s-verify-footer\" }, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"salla-button\", { class: \"s-verify-submit\", \"loader-position\": 'center', disabled: true, onClick: () => this.submit(), ref: b => this.btn = b }, salla.lang.get('pages.profile.verify')), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"p\", { class: \"s-verify-resend-message\", ref: el => this.resendMessage = el }, salla.lang.get('blocks.header.resend_after'), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"b\", { class: \"s-verify-timer\", ref: el => this.timer = el })), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"a\", { href: \"#\", class: \"s-verify-resend\", onClick: () => this.resendCode(), ref: el => this.resend = el }, salla.lang.get('blocks.comments.submit'))), (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"after-footer\" })));\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nSallaVerify.style = sallaVerifyCss;\n\n\n\n\n//# sourceURL=webpack://Theme-One/./node_modules/@salla.sa/twilight-components/dist/esm/salla-branches_13.entry.js?");

/***/ })

}]);