"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkTheme_One"] = self["webpackChunkTheme_One"] || []).push([["node_modules_salla_sa_twilight-components_dist_esm_salla-conditional-fields_entry_js"],{

/***/ "./node_modules/@salla.sa/twilight-components/dist/esm/salla-conditional-fields.entry.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@salla.sa/twilight-components/dist/esm/salla-conditional-fields.entry.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"salla_conditional_fields\": () => (/* binding */ SallaConditionalFields)\n/* harmony export */ });\n/* harmony import */ var _index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-20b84fd0.js */ \"./node_modules/@salla.sa/twilight-components/dist/esm/index-20b84fd0.js\");\n/*!\n * Crafted with ❤ by Salla\n */\n\n\nconst SallaConditionalFields = class {\n  constructor(hostRef) {\n    (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n  }\n  changeHandler(event) {\n    var _a;\n    console.log(\"🚀 ~ file: salla-conditional-fields.tsx ~ line 17 ~ SallaConditionalFields ~ changeHandler ~ changeHandler\", event);\n    salla.log('Received the change event: ', event);\n    if (!event.target || !['SELECT'].includes(event.target.tagName) && !['checkbox'].includes(event.target.getAttribute('type'))) {\n      salla.log('Ignore the change because is not support input: ' + (((_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.tagName) || 'N/A'));\n      return;\n    }\n    // to extract the option id from the input name, the supported names are name[*] and name[*][]\n    let optionId = event.target.name.replace('[]', '');\n    let isMultiple = event.target.getAttribute('type') === 'checkbox';\n    salla.log('Trying to find all the element with condition:', `[data-show-when^=\"${optionId}\"]`);\n    this.host.querySelectorAll(`[data-show-when^=\"${optionId}\"]`)\n      .forEach((field) => {\n      let isEqual = !(field === null || field === void 0 ? void 0 : field.dataset.showWhen.includes('!='));\n      let value = field === null || field === void 0 ? void 0 : field.dataset.showWhen.replace(/(.*)(=|!=)(.*)/gm, '$3').trim();\n      // let isSelected = isMultiple ? event.target?.checked : value === event.target.value;\n      let isSelected;\n      if (isMultiple) {\n        // @ts-ignore\n        let selectedValues = Array.from(this.host.querySelectorAll(`input[name=\"${event.target.name}\"]:checked`), e => e === null || e === void 0 ? void 0 : e.value);\n        isSelected = selectedValues.includes(value.toString());\n      }\n      else {\n        isSelected = value === event.target.value;\n      }\n      salla.log('The input is ', (isMultiple ? 'Multiple' : 'Single'), ' value:', isSelected);\n      let showTheInput = (isEqual && isSelected) || (!isEqual && !isSelected);\n      if (showTheInput) {\n        field.classList.remove('hidden');\n        field.querySelectorAll('[name]').forEach((input) => {\n          input.removeAttribute('disabled');\n          //To handle focus on hidden input error\n          if (!['checkbox'].includes(input.getAttribute('type')) && field.getElementsByClassName('required').length) {\n            input.setAttribute('required', '');\n          }\n        });\n      }\n      else {\n        field.classList.add('hidden');\n        field.querySelectorAll('[name]').forEach((input) => {\n          input.setAttribute('disabled', '');\n          input.removeAttribute('required');\n          if (['checkbox'].includes(input.getAttribute('type')) && input.hasOwnProperty('checked')) {\n            // @ts-ignore\n            input.checked = false;\n          }\n          //firing this event will show errors, so don't run it when pageLoading.\n          // if (this.optionsAlreadyInitiated) {\n          //   salla.document.event.fireEvent(input, 'change', {'bubbles': true});\n          // }\n        });\n      }\n    });\n  }\n  componentDidRender() {\n    this.host.querySelectorAll(`[data-show-when]`).forEach((field) => {\n      var _a;\n      // @ts-ignore\n      let optionName = (_a = field === null || field === void 0 ? void 0 : field.dataset) === null || _a === void 0 ? void 0 : _a.showWhen.replace(/(.*)(=|!=)(.*)/gm, '$1').trim();\n      console.log(\"🚀 ~ file: salla-conditional-fields.tsx ~ line 83 ~ SallaConditionalFields ~ this.host.querySelectorAll ~ optionName\", optionName);\n      if (!optionName) {\n        return;\n      }\n      this.changeHandler({\n        target: this.host.querySelector('[name^=\"' + optionName + '\"]')\n      });\n    });\n  }\n  render() {\n    return ((0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", null)));\n  }\n  get host() { return (0,_index_20b84fd0_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\n\n\n\n\n//# sourceURL=webpack://Theme-One/./node_modules/@salla.sa/twilight-components/dist/esm/salla-conditional-fields.entry.js?");

/***/ })

}]);