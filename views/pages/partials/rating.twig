{% if store.settings.rating.is_enabled %}

    {# oreder store rating #}
    {% if store.settings.rating.store %}
        {# Store Rating #}
        <section x-data="{ temp: 0, orig: 0 }" class="bg-white my-10 p-5 rounded-md mb-5">
            <h2 class="text-xl font-bold mb-5">{{ trans('pages.rating.rate_the_store') }}</h2>
            <div class="mb-2">
                <textarea id="storeReview" x-model="$store.orderRating.storeRating.comment" :class="{'has-error': !$store.orderRating.storeRating.comment && $store.orderRating.isSubmit}" class="form-input h-20" placeholder="تقييمك للمتجر ..."></textarea>
                <small class="block text-red-400 text-tiny text-end" x-show="!$store.orderRating.storeRating.comment && $store.orderRating.isSubmit"> التعليق  مطلوب</small>
            </div>
            <div  class="flex items-center cursor-pointer" @click="orig = temp">
                <input x-model="$store.orderRating.storeRating.rating = orig" type="number" :value="orig" class="hidden" />
                {% include 'pages.partials.rating-stars' with {'stars':testimonial.stars} %}
            </div>
            <small class="text-red-400" x-show="!$store.orderRating.storeRating.rating && $store.orderRating.isSubmit">تقييم المتجر مطلوب</small>
        </section>
    {% endif %}

    {# order shipping company rating #}
    {% if order.has_shipping and store.settings.rating.shipping %}
        {# Shipping Rating #}
        <section x-data="{ temp: 0, orig: 0,}" class="bg-white my-10 p-5 rounded-md mb-5">
        <h2 class="text-xl font-bold mb-5">{{ trans('pages.rating.rate_shipping') }}</h2>
        <div class="mb-2">
            <textarea id="shippingReview" x-model="$store.orderRating.shippingRating.comment"  class="form-input h-20 mb-2" placeholder="تقييمك لشركة الشحن ..." :class="{'has-error': !$store.orderRating.shippingRating.comment && $store.orderRating.isSubmit}"></textarea>
            <small class="block text-red-400 text-tiny text-end" x-show="!$store.orderRating.shippingRating.comment && $store.orderRating.isSubmit"> التعليق  مطلوب</small>
        </div>
        <div class="flex items-center cursor-pointer" @click="orig = temp">
            <input x-model="$store.orderRating.shippingRating.rating = orig" type="number" :value="orig" class="hidden"/>
            {% include 'pages.partials.rating-stars' with {'stars':shippingRate.stars} %}
        </div>
        <small class="text-red-400" x-show="!$store.orderRating.shippingRating.rating && $store.orderRating.isSubmit">تقييم شركة الشحن مطلوب</small>
    </section>
    {% endif %}

    <button x-data @click="$store.orderRating.sendRate()" class="btn btn-primary w-full">{{ trans('pages.rating.send_ratings') }}</button>
{% endif %}

<script>
    let storeReview = document.querySelector("#storeReview").value
    let shippingReview = document.querySelector("#shippingReview").value
    let productsReviews = document.querySelectorAll(".product-review");


    // Order Rating
    document.addEventListener('alpine:init', () => {
        Alpine.store('orderRating', {
            isSubmit: false,
            productsRating: {}, // {'productId': {comment: '', rating: null}}
            storeRating:  {comment: '', rating: null},
            shippingRating: {comment: '',rating: null},

            init(){
                let orderItems = document.querySelectorAll('.order-item');
                orderItems.forEach(item => {
                    this.productsRating[item.dataset.orderItemId] = {product_id: item.dataset.orderItemProductId, comment: null, rating: null}
                });
            },

            sendRate: function(){
                //this.validation();
                this.isSubmit = true
                console.log('productsRating:', {...this.productsRating});

                salla.feedback.api.store({order_id: {{ order.id }}, comment: this.storeRating.comment, rating: this.storeRating.rating});
                salla.feedback.api.shipping({order_id: {{ order.id }}, comment: this.shippingRating.comment, rating: this.shippingRating.rating});
                salla.feedback.api.product({order_id: {{ order.id }}, products: this.productsRating});
            },
        })
    })
    // End::Order Rating
</script>

<script>

// for hovered star ---
function highlightSelectedStars() {
    let rateElements = document.querySelectorAll('.rate-element');
    rateElements.forEach(rateElement => {
        let starElements = rateElement.querySelectorAll('.btn--star');
        rateElement.addEventListener('mouseout', () => {

            // remove hovered state from stars ---
            rateElement.querySelectorAll('.btn--star').forEach(star => {
                star.classList.remove('text-theme-yellow');
            })
        })

        starElements.forEach((starElement, index) => {
            starElement.addEventListener('mouseover', () => {
                starElement.classList.add('text-theme-yellow');
                if (index <= 1) {
                    starElement.previousElementSibling.tagName === 'BUTTON' ? starElement.previousElementSibling.classList.add('text-theme-yellow') : null;
                } else {
                    for (let i = 0; i < index; i++) {
                        starElements[i].classList.add('text-theme-yellow');
                    }
                }
            })
            starElement.addEventListener('mouseout', () => {
                starElement.classList.contains('text-theme-yellow') ? starElement.classList.remove('text-theme-yellow') : null;
            })
        })
    })
}
highlightSelectedStars();

 // Listen for form submissions
        salla.document.event.onSubmit('.rate-element', function (event) {
            // Prevent form from submitting
            event.preventDefault();

            // Get the selected star - activeElement is not supported in safari
          var activeStars = event.target.querySelectorAll('.btn--star.hovered');
          var selected = activeStars[activeStars.length - 1];
          if (!selected) return;
          var selectedIndex = parseInt(selected.dataset.star, 10),
            selectedText = selected.dataset.text;
          event.target.nextElementSibling.innerHTML = selectedText;
          event.target.querySelector('.rating_hidden_input').value = selectedIndex;

            // Get all stars in this form (only search in the form, not the whole document)
            // Loop through each star, and add or remove the `.selected` class to toggle highlighting
            event.target
                .querySelectorAll('.btn--star')
                .forEach(function (star, index) {

                    if (index < selectedIndex) {
                        // Selected star or before it, Add highlighting
                        star.classList.add('selected');
                        return;
                    }
                    // After selected star, Remove highlight
                    star.classList.remove('selected');
                });

            // Remove aria-pressed from any previously selected star
            var previousRating = event.target.querySelector('.star[aria-pressed="true"]');
            if (previousRating) {
                previousRating.removeAttribute('aria-pressed');
            }

            // Add aria-pressed role to the selected button
            selected.setAttribute('aria-pressed', true);
        });
</script>

{#

<div x-data="ratingInit()" x-init="currentStep = Object.keys(review)[step-1];">
    <div class="panel bg-white rounded-md">
        <div class="panel__header border-b border-border-color p-5">
            <div class="flex items-center space-s-3">
                <div class="bg-border-color w-12 h-12 text-xl text-gray-400 rounded-icon">
                    <i class="sicon-store"></i>
                </div>
                <span class="font-bold text-sm">{{ trans('pages.rating.rate_order') }}</span>
            </div>
        </div>

        <div class="panel__body pt-14 h-72 overflow-hidden">
            #}
{# oreder store rate #}{#

            {% if store.settings.rating.store %}
                <div class="step1 flex flex-col items-center" x-show.transition.in="step === 1"
                     x-transition.duration.300ms>
                    <h2 class="font-bold text-lg mb-8">{{ trans('pages.rating.rate_the_store') }}</h2>

                    {% include 'pages.partials.rating-emojis' with {'for': 'store'} %}
     
                </div>
            {% endif %}

            #}
{# order products rate #}{#

            {% if store.settings.rating.products %}
                <div class="step2 flex flex-col items-center" x-show.transition.in="step === 2"
                     x-transition.duration.300ms>
                    <h2 class="font-bold text-lg mb-8">{{ trans('pages.rating.rate_products') }}</h2>

                    {% include 'pages.partials.rating-emojis' with {'for': 'products'} %}
                </div>
            {% endif %}

            #}
{# order shipping company rate #}{#

            {% if order.has_shipping and store.settings.rating.shipping %}
                <div class="step3 flex flex-col items-center" x-show.transition.in="step === 3"
                     x-transition.duration.300ms>
                    <h2 class="font-bold text-lg mb-8">{{ trans('pages.rating.rate_shipping') }}</h2>

                    {% include 'pages.partials.rating-emojis' with {'for': 'shipping'} %}
  
                </div>
            {% endif %}
        </div>


        <div class="relative">
            <div class="absolute text-xs -top-1.5 w-full tex text-center text-red-500" x-text="review[currentStep] ? '' : validationMessage "></div>

            <ul class="flex justify-center text-center space-s-1.5 py-8">
                <template x-for="stepPage in steps">
                    <li class="cursor-pointer w-2.5 h-2.5  rounded-full transition-colors duration-300" :class="step == stepPage ? 'bg-primary' : 'bg-gray-200'"></li>
                </template>
            </ul>
        </div>

        <div class="panel__footer p-5 text-end space-s-8">
            <button x-show="step > 1" @click="previousStep" class="font-bold text-sm text-primary">
                السابق
            </button>
            <button @click="validateStep" class="btn btn-primary h-10 px-8"
                    :class="{'w-48': step == 3}"
                    x-text="step == 3 ? '{{ trans('pages.rating.send_ratings') }}': 'التالي' "></button>
        </div>
    </div>


    <div x-show="openRatingModal" x-cloak class="fixed z-50 inset-0 overflow-y-auto"
         aria-labelledby="modal-title" role="dialog"
         aria-modal="true">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">

            <div x-show="openRatingModal" x-transition:enter="transition ease-out duration-300"
                 x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100"
                 x-transition:leave="transition ease-in duration-200"
                 x-transition:leave-start="opacity-100 "
                 x-transition:leave-end="opacity-0"
                 class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
                 aria-hidden="true"></div>

            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

            <div x-show="openRatingModal" @click.away="closeModal"
                 x-transition:enter="transition ease-out duration-300"
                 x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                 x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
                 x-transition:leave="transition ease-in duration-200"
                 x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
                 x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                 class="inline-block align-bottom bg-white rounded-md px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-24">
                <div>
                    <div class="mx-auto flex items-center justify-center">
                        <button @click="closeModal" class="close-modal text-gray-400 w-6 h-6 focus:outline-none text-lg absolute top-6 end-6">
                            <i class="sicon-cancel"></i>
                        </button>

                        <img src="{{ asset('images/review.svg') }}" alt="" class="message-item opacity-0">
                    </div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="message-item text-base leading-6 font-bold" id="modal-title">
                            #}
{#تم إرسال تقييمك بنجاح#}{#

                        </h3>
                        <div class="mt-2">
                            <p class="message-item text-sm leading-6">
                                {{ trans('pages.rating.thanks') }}
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script>
    function ratingInit() {
        return {
            review: {"storeRate": {{ order.store_feedback.stars }}, "productsRate": null, "shippingRate": {{ order.shipping_feedback.stars }}},
            comment: {"storeComment":'',  "productsComment": '', "shippingComment": ''},
            step: {{ (store.settings.rating.store ? 1 : (store.settings.rating.products ? 2 : 3)) }},
            steps: {{(store.settings.rating.store + store.settings.rating.products + (order.has_shipping and store.settings.rating.shipping)) }},
            validationMessage: '',
            currentStep: "",
            openRatingModal: false,
            validationMessages: {
                shippingRate: 'تقيمم شركة الشحن مطلوب',
                productsRate: 'تقييم المنتجات مطلوب',
                storeRate: 'تقييم المتجر مطلوب'
            },

            previousStep: function () {
                if (this.step > 1) {
                    this.step -= 1;
                }
            },

            nextStep: function () {
                if (this.step < this.steps) {
                    this.validationMessage = '',
                        this.step += 1;
                } else if (this.step >= this.steps) {
                    this.openRatingModal = true;
                    this.animatedItems();
                    this.sendReview(this.comment[this.currentStep])
                }
            },


            validateStep: function () {
                const stepKey = Object.keys(this.review)[this.step - 1];
                this.currentStep = stepKey;
                if (this.review[stepKey]) {
                    this.nextStep()
                } else {
                    this.validationMessage = this.validationMessages[stepKey];
                }
            },

            animatedItems: function () {
                anime({
                    targets: '.message-item',
                    opacity: [0, 1],
                    translateY: [20, 0],
                    delay: function (el, i) {
                        return i * 100;
                    },
                })
            },

            sendReview: function (comment) {
                if (this.currentStep === 'storeRate'){
                    salla.feedback.api.store({order_id: {{ order.id }}, comment: comment, rating: this.review.storeRate});
                } else if(this.currentStep === 'productsRate'){
                    salla.feedback.api.product({order_id: {{ order.id }}, comment: comment, rating: this.review.productsRate});
                } else if(this.currentStep === 'shippingRate'){
                    salla.feedback.api.shipping({order_id: {{ order.id }}, comment: comment, rating: this.review.shippingRate});
                }
            },

            closeModal: function () {
                this.openRatingModal = false;
            }

        }
    }
</script>

#}
